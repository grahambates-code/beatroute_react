{"version":3,"sources":["Components/Photos/Add/index.js","Components/Cards/Sketch/Deck/layers/CustomPathLayer/path-layer/path-tesselator.js","Components/Cards/Sketch/Deck/layers/CustomPathLayer/path-layer/path.js","Components/Cards/Sketch/Deck/layers/CustomPathLayer/path-layer/path-layer-vertex.glsl.js","Components/Cards/Sketch/Deck/layers/CustomPathLayer/path-layer/path-layer-fragment.glsl.js","Components/Cards/Sketch/Deck/layers/CustomPathLayer/path-layer/path-layer.js","Components/Cards/Sketch/Deck/layers/CustomPathLayer/index.js","Components/Cards/Sketch/Deck/layers/AnimatedThingLayer/index.js","Components/Cards/Sketch/Deck/layers/AssetLayer/index.js","Components/Cards/Sketch/Deck/layers/EditLayer/index.js","Components/Cards/Sketch/Deck/index.js","Components/Cards/Front/Frame/index.js","Components/Cards/Front/AddGPS/index.js","Components/Cards/Front/AddGPS/saver.js","Components/Cards/Front/index.js","Components/Cards/Title/index.js","Components/Saver/index.js","Components/Cards/Sketch/Procedural/index.js","Components/Cards/Sketch/Label/index.js","Components/Carousel/CarouselActions.js","Components/Carousel/Create/index.js","Components/Carousel/Slide/SlideMedia/AddMedia/index.js","Components/Carousel/Slide/SlideMedia/RemoveMedia/index.js","Components/Carousel/Slide/SlideMedia/ListMedia/AssignPhotoToSlide/index.js","Components/Carousel/Slide/SlideMedia/ListMedia/Query/index.js","Components/Carousel/Slide/SlideMedia/ListMedia/index.js","Components/Carousel/Slide/SlideMedia/DeleteSlide/index.js","Components/Carousel/Slide/SlideMedia/AdjustRotation/index.js","Components/Carousel/Slide/SlideMedia/EditText/index.js","Components/Carousel/Slide/SlideMedia/AddAsset/index.js","Components/Carousel/Slide/Frame/index.js","Components/Carousel/index.js","Components/Cards/Sketch/index.js","Components/Cards/Polaroids/MaskModeFrame/index.js","util/transform.js","Components/Cards/Polaroids/HTML/index.js","Components/Adder/AddFront/index.js","Components/Adder/AddTitle/index.js","Components/Adder/AddMap/index.js","Components/Adder/AddSketch/index.js","Components/Adder/index.js","Components/Cards/Title/Editor/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["SAVE_PHOTO","gql","AddPhoto","card","refetch","getUploadParams","file","body","meta","FormData","append","url","onError","alert","onCompleted","mutation","addphoto","loading","error","className","onChangeStatus","a","status","exifr","gps","then","geo","object","type","data","JSON","parse","xhr","response","variables","objects","remove","onSubmit","accept","inputContent","files","extra","reject","PathTesselator","opts","attributes","positions","size","padding","initialize","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","buffer","this","normalize","path","gridResolution","wrapLongitude","flatPath","Array","isArray","length","i","j","cutPolylineByGrid","cutPolylineByMercatorBounds","normalizePath","positionSize","resolution","attributeName","subPath","getGeometrySize","numPoints","getPathLength","isClosed","context","geometrySize","updateGeometryAttributes","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","ptIndex","getPointOnPath","index","target","loop","lastPointIndex","Tesselator","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","rounded","miterLimit","billboard","_pathType","getPath","getColor","getWidth","ATTRIBUTE_TRANSITION","enter","chunk","subarray","PathLayer","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","vertexOffset","GL","DOUBLE","use64bitPositions","transition","accessor","update","calculatePositions","noAlloc","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","UNSIGNED_BYTE","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","encodePickingColor","__source","setState","pathTesselator","getDashArray","extensions","log","removed","oldProps","changeFlags","attributeManager","dataChanged","updateTriggersChanged","all","state","buffers","updateGeometry","geometryBuffer","getGeometry","positionFormat","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","delete","_getModel","params","info","find","d","uniforms","widthMultiplier","metersPerPixel","setUniforms","Object","assign","jointType","draw","Model","getShaders","id","geometry","Geometry","drawMode","TRIANGLES","indices","Uint16Array","isInstanced","attribute","get","Layer","layerName","filterCall","vertexShaderParts","split","vertexShader","fragmentShaderParts","fragmentShader","CustomPathLayer","start","your","free","trial","now","getLengths","lengthSoFar","points","startingPoint","map","point","Math","sqrt","prototype","call","lengths","instanceLengths","instanceNextLengths","seed","rough","newSeed","canvasDisplay","canvas","document","createElement","ctx","getContext","x","stageConfig","width","height","rc","ellipse","roughness","strokeWidth","stroke","SketchDeck","center","turf","circle","units","left","bottom","right","top","bounds","image","parameters","depthTest","BitmapLayer","somethingChanged","CompositeLayer","AssetLayer","scenegraph","asset","ScenegraphLayer","pickable","getPosition","position","getOrientation","angle","getScale","scale","sizeScale","componentName","MaskLayer","console","EditableGeoJsonLayer","opacity","mode","TranslateMode","selectedFeatureIndexes","_subLayerProps","geojson","getFillColor","getLineColor","pointRadiusMinPixels","pointRadiusMaxPixels","onEdit","event","updatedData","editType","cl","DirectionalLight","color","direction","intensity","cl2","ambientLight","AmbientLight","lightingEffect","LightingEffect","emptyFeatureCollection","editingAsset","debounce","_","e","slide","slides","slideIndex","layers","TileLayer","tileSize","renderSubLayers","tile","bbox","west","south","east","north","desaturate","GeoJsonLayer","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getRadius","getLineWidth","assets","onClick","EditLayer","TextLayer","getText","getSize","sizeUnits","getAngle","getTextAnchor","fontFamily","getAlignmentBaseline","that","controller","updateSlide","slide_id","pointB","slidePhotoRotation","camera","controllerState","_viewportProps","MapController","viewState","inertia","touchRotate","dragRotate","scrollZoom","doubleClickZoom","_animate","effects","ref","deck","deckGL","onViewStateChange","viewId","setViewState","Component","children","MyDropzone","updateTripGeojson","onDrop","useCallback","acceptedFiles","name","endsWith","reader","FileReader","onload","readXml","result","doc","DOMParser","parseFromString","gpx","readAsText","useDropzone","getRootProps","getInputProps","isDragActive","SAVE_TRIP_GEOJSON","trip","updateLandscape","style","src","SAVE_TITLE","useState","seconds","updateTitle","onBlur","title","currentTarget","textContent","card_id","contentEditable","suppressContentEditableWarning","SAVE_TABLE","SAVE_SLIDE","SAVE_SLIDE_MEDIA","SAVE_MAP","SAVE_ANNOTATION","SAVE_LANDSCAPE","updateSlideMedia","updateMap","updateCamera","updateAnnotation","datasource","elevation","apiKey","imagery","urlFormat","attribution","myRef","React","createRef","window","setTimeout","Procedural","orbitTarget","compassVisible","displayLocation","location","text","CarouselActions","styled","div","INSERT_SLIDE","setSlideIndex","add","SET","media","closeModal","photo","json","set","GETMEDIA","App","query","m","AssignPhotoToSlide","modalIsOpen","setIsOpen","WebMercatorViewport","unproject","topLeft","rotation","isOpen","onRequestClose","content","marginRight","transform","Query","ADD","reload","del","setLocked","setSlidePhotoRotation","max","onChange","trigger","edit","MY_MUTATION_MUTATION","MyMutationMutation","MyMutation","stringify","setEdit","EditText","DeleteSlide","AddAsset","AdjustRotation","Create","Carousel","setCurrentPhoto","prev","useRef","useEffect","current","usePrevious","useSpringCarousel","withLoop","items","renderItem","carouselFragment","useListenToCustomEvent","getCurrentActiveItem","slideToNextItem","nextItem","transitionDuration","transitionInterpolator","LinearInterpolator","classNames","flex","ItemActions","gsap","registerPlugin","ScrollTrigger","longitude","latitude","zoom","currentPhoto","prevProps","prevState","snapshot","client","animationDuration","bearing","updateTable","MaskModeFrame","undefined","rotateDeg","imgSource","alt","ActionComponent","getRandomDeg","random","Index","TransformUtils","ADD_FRONT","trip_id","addFront","slide_data","showButtons","setShowButtons","AddFront","AddTitle","AddMap","AddSketch","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","GETCARD","httpLink","HttpLink","uri","ApolloClient","link","cache","InMemoryCache","portalNode2","useMemo","portals","loadedCount","setLoadedCount","admin","owners","trips","cards","stillLoading","forEach","c","coordEach","coords","pop","measureRef","contentRect","node","incrementLoadedCount","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fonts","ready","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","indexOf","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6fd3b651.chunk.js","sourcesContent":["import React, {useState, useEffect, Fragment} from 'react';\nimport gql from \"graphql-tag\";\nimport {Mutation} from \"react-apollo\";\n\nimport 'react-dropzone-uploader/dist/styles.css'\nimport Dropzone from 'react-dropzone-uploader'\nimport './index.less'\nimport exifr from \"exifr\";\n\nconst SAVE_PHOTO = gql`\n  mutation AddPhoto($objects: [media_insert_input!]!) {\n\n  insert_media(objects: $objects) {\n    returning {\n      id\n    }\n  }\n}\n\n`;\n\nfunction AddPhoto({card, refetch}) {\n\n    const getUploadParams = ({ file, meta }) => {\n        const body = new FormData()\n        body.append('file', file)\n        body.append('upload_preset', \"ml_default\")\n        return { url: 'https://api.cloudinary.com/v1_1/db8uwhsbg/upload', body }\n    }\n\n    return (\n\n        <div>\n\n            <Mutation\n                onError={() => alert( 'Could not add photo')}\n                onCompleted={()=> {refetch && refetch()}}\n                mutation={SAVE_PHOTO}\n            >\n\n                {(addphoto, {loading, error}) => {\n\n                    const handleChangeStatus = (a, status) => {\n\n                        if ('done' === status) {\n\n                            exifr.gps(a.file).then(geo => {\n\n                                const object = {type : 'PHOTO', geo : geo, data : {...JSON.parse(a.xhr.response)}};\n\n                                addphoto({variables : {objects :  [object]}}).then(() => {\n                                    a.remove();\n                                });\n\n\n                            });\n                        }\n                    }\n\n                    return <div className={'PhotoUpload'}>\n\n                            <Dropzone\n                                getUploadParams={getUploadParams}\n                                onChangeStatus={handleChangeStatus}\n                                onSubmit={null}\n                                accept=\"image/*\"\n                                inputContent={(files, extra) => (extra.reject ? 'Image, audio and video files only' : 'Drag Files')}\n                            />\n\n                    </div>\n\n                }}\n            </Mutation>\n\n        </div>\n\n    );\n}\n\nexport default AddPhoto;\n\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  /* Utilities */\n  // Returns the number of points in the path\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  // Returns a point on the path at the specified index\n  getPointOnPath(path, index, target = []) {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n","import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\n/** Returns a flat array of path positions\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n */\nexport function normalizePath(path, size, gridResolution, wrapLongitude) {\n  let flatPath = path;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\nuniform bool billboard;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 lineJoin(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * jointType * 4.0 * flipIfTrue(isStartCap), isJoint);\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return currPoint + offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.worldPosition = instanceStartPositions;\n  geometry.worldPositionAlt = instanceEndPositions;\n  geometry.pickingColor = instancePickingColors;\n\n  vec2 widthPixels = vec2(clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0);\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  if (billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    vec2 width = project_pixel_size_to_clipspace(widthPixels);\n\n    vec3 pos = lineJoin(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      width\n    );\n\n    gl_Position = vec4(pos * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    vec2 width = project_pixel_size(widthPixels);\n\n    vec4 pos = vec4(\n      lineJoin(prevPosition, currPosition, nextPosition, width),\n      1.0);\n    geometry.position = pos;\n    gl_Position = project_common_position_to_clipspace(pos);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float jointType;\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (jointType > 0.0 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (jointType == 0.0 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  rounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    if (data[0] && data[0].__source) {\n      // data is wrapped\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      rounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          jointType: Number(rounded),\n          billboard,\n          widthScale: widthScale * widthMultiplier,\n          miterLimit,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n","import {Layer, project32, picking} from '@deck.gl/core';\r\nimport PathLayer from './path-layer/path-layer.js';\r\n\r\nimport vs from './path-layer/path-layer-vertex.glsl';\r\nimport fs from './path-layer/path-layer-fragment.glsl';\r\n\r\n// re-use joint code\r\nconst filterCall = 'DECKGL_FILTER_COLOR';\r\n\r\nconst vertexShaderParts = vs.split(filterCall);\r\nconst vertexShader = `\r\n\t\tattribute float instanceLengths;\r\n\t\tattribute float instanceNextLengths;\r\n\t\tvarying float vLength;\r\n\t\tuniform vec2 startingPoint;\r\n\t\tvarying vec2 vPosition;\r\n\t\tvarying float vWidth;\r\n\t` +\r\n\tvertexShaderParts[0] + `\r\n\t\tvLength = instanceLengths + (instanceNextLengths - instanceLengths) * vPathPosition.y / vPathLength;\r\n\t\tvPosition = geometry.position.xy - project_position(startingPoint);\r\n\t\tvWidth = length(widthPixels);\r\n\t` +\r\n\tfilterCall +\r\n\tvertexShaderParts[1];\r\n\r\nconst fragmentShaderParts = fs.split(filterCall);\r\nconst fragmentShader = `\r\n\t\tvarying float vLength;\r\n\t\tvarying vec2 vPosition;\r\n\t\tvarying float vWidth;\r\n\r\n\t\tfloat pingpong (float x) {\r\n\t\t\treturn 1.0 - 2.0 * abs(mod(x, 2.0) - 1.0);\r\n\t\t}\r\n\t\tfloat noise (vec2 uv) {\r\n\t\t\tconst float k \t= 257.0;\r\n\t\t\tuv.xy = mod(uv.xy, 777.0);\r\n\t\t\tvec4 l  \t\t= vec4(floor(uv),fract(uv));\r\n\t\t\tl.zw    \t\t= l.zw*l.zw*(3.0-2.0*l.zw);\r\n\t\t\tfloat u \t\t= l.x + l.y * k;\r\n\t\t\tvec4 v  \t\t= vec4(u, u+1.0,u+k, u+k+1.0);\r\n\t\t\tv       \t\t= fract(fract(1.23456789*v)*v/.987654321);\r\n\t\t\tl.x     \t\t= mix(v.x, v.y, l.z);\r\n\t\t\tl.y     \t\t= mix(v.z, v.w, l.z);\r\n\t\t\treturn mix(l.x, l.y, l.w);\r\n\t\t}\r\n\t` +\r\n\tfragmentShaderParts[0] + `\r\n\t\tfloat a = 0.0;\r\n\t\tfor (int i = 1; i < 4; i++) {\r\n\t\t\tfloat w = 0.33 - 0.01 * float(i);\r\n\t\t\tfloat s = pingpong( 1234.5 * vLength / (8.7 - float(i)) + float(i) );\r\n\t\t\tfloat d = abs( (1.0 - 2.0 * w) * s - vPathPosition.x );\r\n\t\t\ta = a + smoothstep(w, w - 0.2, d);\r\n\t\t}\r\n\t\tfloat zoomStrength = clamp( vWidth * 0.06, 0.0, 1.0 );\r\n\t\tgl_FragColor.a = mix( a, a * (\r\n\t\t\tnoise( vPosition * 3e4 + 1.2 * zoomStrength * vec2(noise( vPosition * 1e5 )) )\r\n\t\t\t\t * (0.5 + 0.5 * (1.0 - zoomStrength) + zoomStrength * noise( vPosition * 2e5 - 4. * vec2(noise( vPosition * 1e4 )) ) )\r\n\t\t), 0.66 );\r\n\t` +\r\n\tfilterCall +\r\n\tfragmentShaderParts[1];\r\n\r\nexport default class CustomPathLayer extends PathLayer {\r\n\tconstructor(start, your, free, trial, now) {\r\n\t\tstart.getLengths = (data) => {\r\n\t\t\tlet lengthSoFar = 0, points = this.props.getPath(data);\r\n\t\t\tthis.state.model.uniforms.startingPoint = points[0];\r\n\t\t\treturn points.map(function(point, index, points) {\r\n\t\t\t\tlengthSoFar += index ? Math.sqrt(\r\n\t\t\t\t\t(point[0] - points[index - 1][0])**2 +\r\n\t\t\t\t\t(point[1] - points[index - 1][1])**2\r\n\t\t\t\t) : 0;\r\n\t\t\t\treturn lengthSoFar;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper(start, your, free, trial, now);\r\n\t}\r\n\r\n\tgetShaders() {\r\n\t\treturn Layer.prototype.getShaders.call(this, {vs: vertexShader, fs: fragmentShader, modules: [project32, picking]});\r\n\t}\r\n\r\n\tinitializeState(params) {\r\n\t\tsuper.initializeState(params);\r\n\r\n\t\tconst attributeManager = this.getAttributeManager();\r\n\t\tattributeManager.addInstanced({\r\n\t\t\tlengths: {\r\n\t\t\t\tsize: 1,\r\n\t\t\t\taccessor: 'getLengths',\r\n\t\t\t\tshaderAttributes: {\r\n\t\t\t\t\tinstanceLengths: {\r\n\t\t\t\t\t\tvertexOffset: 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\tinstanceNextLengths: {\r\n\t\t\t\t\t\tvertexOffset: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\nimport * as turf from '@turf/turf/index';\nimport { CompositeLayer } from '@deck.gl/core';\nimport {BitmapLayer, GeoJsonLayer} from \"@deck.gl/layers\";\nimport rough from 'roughjs/bundled/rough.esm'\n\nconst seed = rough.newSeed();\n\nclass CanvasDisplay {\n\n  constructor() {\n    this.canvas = document.createElement('canvas');\n\n    this.ctx = this.canvas.getContext('2d');\n    this.x = 0;\n\n    this.stageConfig = {\n      width: 5000,\n      height: 5000\n    };\n\n    this.canvas.width = this.stageConfig.width;\n    this.canvas.height = this.stageConfig.height;\n\n    this.rc = rough.canvas(this.canvas);\n\n    const that = this;\n\n\n    this.rc.ellipse(2500, 2500, 2500,2000, {roughness: 2.8,strokeWidth : 100, stroke: 'black', seed });\n\n\n  }\n\n}\n\nlet canvasDisplay = new CanvasDisplay();\n\nclass SketchDeck extends BitmapLayer {\n  constructor(props) {\n\n    const center = turf.point(props.center);\n\n    var radius = 1000;\n    var options = {units: 'meters' };\n    var circle = turf.circle(center, radius, options);\n\n    const [left, bottom, right, top] = turf.bbox(circle);\n\n    const params = {\n\n      id: 'bitmap-layer4',\n      bounds:   [[left, bottom], [left, top], [right, top], [right, bottom]],\n      image: canvasDisplay.canvas,\n\n      parameters: {\n        depthTest: false,\n\n      }\n    };\n\n    super(params);\n  }\n}\n\nexport default class Animated extends CompositeLayer {\n\n  initializeState() {\n\n  }\n\n  shouldUpdateState({ changeFlags }) {\n    return changeFlags.somethingChanged;\n  }\n\n  finalizeState() {\n    super.finalizeState();\n  }\n\n  renderLayers() {\n\n    const sketch = new SketchDeck({  center : this.props.center});\n\n    return [  sketch ];\n  }\n}\n\n\nAnimated.layerName= 'AnimatedLayer';\n","import { CompositeLayer } from '@deck.gl/core';\nimport { ScenegraphLayer} from '@deck.gl/mesh-layers';\n\nexport default class AssetLayer extends CompositeLayer {\n\n    initializeState() {\n\n        let self = this;\n\n        this.setState({ });\n    }\n\n    shouldUpdateState({ changeFlags }) {\n        return changeFlags.somethingChanged;\n    }\n\n    finalizeState() {\n        super.finalizeState();\n    }\n\n    renderLayers() {\n        //const {  } = this.state;\n        const { scenegraph, asset } = this.props;\n\n        return [\n\n            new ScenegraphLayer({\n\n                id: 'scenegraph-layer' + asset.id,\n\n                data : [asset.data],\n\n                pickable: true,\n\n                scenegraph,\n\n                getPosition: d => d.position,\n\n               // getColor : [255,0,0,255],\n\n                getOrientation: d => [0, d.angle, 90 ],\n\n                getScale: (d) =>[d.scale,d.scale,d.scale],\n\n                sizeScale: 4,\n\n                // _lighting: 'flat'\n            })\n\n        ];\n    }\n}\n\nAssetLayer.componentName = 'AssetLayer';\n","import { CompositeLayer } from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport GL from '@luma.gl/constants';\nimport * as turf from \"@turf/turf\";\nimport { EditableGeoJsonLayer, TransformMode, TranslateMode } from \"nebula.gl\";\n\nconst VISIBLE = 1;\n\nexport default class MaskLayer extends CompositeLayer {\n\n    initializeState() {\n        const { asset } = this.props;\n\n        console.log(turf.feature(([  -2.8729248046875, 54.54339315407258 ])));\n       // this.setState({position : turf.feature([  -2.8729248046875, 54.54339315407258 ])});\n    }\n\n    renderLayers() {\n\n       const { asset } = this.props;\n\n       console.log(this.state.position);\n\n       const edit = new EditableGeoJsonLayer({\n              id: 'mask-editor',\n              data:  this.state.position,\n              opacity : VISIBLE,\n              mode: TranslateMode,\n              selectedFeatureIndexes: [0],\n\n              _subLayerProps: {\n                  geojson: {\n                      getFillColor: () => [255,0,255,255],\n                      getLineColor: () => [255,255,255,255],\n                      pointRadiusMinPixels : 50,\n                      pointRadiusMaxPixels : 50\n                  }\n              },\n\n              onEdit: (event) => {\n\n                  const { updatedData, editType } = event;\n\n                 // console.log(updatedData);\n                  this.setState({position : updatedData});\n                  //this.props.setSlidePhotoRotation({ ...this.props.slidePhotoRotation, position : updatedData});\n                  if (editType === 'rotated' || editType === 'translated') {\n                      alert(asset.id);\n                      //this.props.client.mutate({mutation: SAVE_SLIDE_DATA, variables : {slide_id : slide.id, data : {...slide.data, geojson : updatedData} } });\n                   }\n\n              }\n          })\n\n        return [  edit ];\n    }\n}\n\nMaskLayer.componentName = 'EditLayer';\n","import React, {Fragment, useState} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {MapController, LinearInterpolator, FlyToInterpolator} from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport {TileLayer} from '@deck.gl/geo-layers';\nimport {TextLayer} from '@deck.gl/layers';\nimport {Component} from 'react';\nimport _ from \"lodash\";\nimport './index.less';\n\nimport CustomPathLayer  from './layers/CustomPathLayer'\nimport AnimatedThingLayer  from './layers/AnimatedThingLayer'\n\nimport { EditableGeoJsonLayer, TransformMode, TranslateMode } from \"nebula.gl\";\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {CubeGeometry} from '@luma.gl/core'\n\nimport AssetLayer from './layers/AssetLayer';\nimport EditLayer from './layers/EditLayer';\n\nimport {OBJLoader} from '@loaders.gl/obj';\n\nimport {bbox}  from '@turf/turf'\nimport gql from \"graphql-tag\";\nimport {AmbientLight, PointLight, DirectionalLight, LightingEffect} from '@deck.gl/core';\n\nimport {_CameraLight as CameraLight} from '@deck.gl/core';\n\nconst cl = new DirectionalLight({\n    color: [255, 255, 255],\n    direction: [1, 1, -1],\n    intensity: 0.8\n});\n\nconst cl2 = new DirectionalLight({\n    color: [255, 255, 255],\n    direction: [1, 1, -1],\n    intensity: 0.8\n});\n\n// create ambient light source\nconst ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 0.4\n});\n\nconst lightingEffect = new LightingEffect({ cl, cl2, ambientLight});\n\n\nconst emptyFeatureCollection = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n\n    ]\n}\n\n// const SAVE_SLIDE_DATA = gql`\n//\n//     mutation( $slide_id : Int,  $data : jsonb){\n//                     update_card_slide(where: {id: {_eq: $slide_id}}, _set: { data: $data}) {\n//                         returning {\n//                                     id\n//                                   }\n//     }\n//     }\n// `;\n\nexport default class extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {editingAsset : null};\n        this.debounce  = _.debounce(e => e(), 300);\n    }\n\n    render() {\n\n        const slide = this.props.card.slides[this.props.slideIndex];\n\n        //console.log( this.state.editingAsset);\n\n        let layers = [\n\n            new TileLayer({\n                id: 'TileLayer',\n                data: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',\n                tileSize: 256,\n\n                renderSubLayers: props => {\n                    const {\n                        bbox: {west, south, east, north}\n                    } = props.tile;\n\n                    return new BitmapLayer(props, {\n                        data: null,\n                        desaturate : 1,\n                        image: props.data,\n                        bounds: [west, south, east, north]\n                    });\n                },\n               // pickable: true,\n            }),\n\n            new GeoJsonLayer({\n                id: 'route-layer',\n                data : this.props.card.data || emptyFeatureCollection,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 8,\n                lineWidthMaxPixels: 14,\n                getLineColor: [255, 238,100, 255],\n                getRadius: 100,\n                getLineWidth: 10,\n                //modelMatrix : new Matrix4().makeTranslation(0,0,10 ),\n\n                _subLayerProps: {\n                    \"line-strings\": {type: CustomPathLayer},\n                }\n\n            }),\n\n           slide.assets.map(a => new AssetLayer({ onClick: () => { this.setState({editingAsset : a})}, scenegraph: a.type, asset : a})),\n\n           this.state.editingAsset && new EditLayer({asset : this.state.editingAsset}),\n\n            false &&  new SimpleMeshLayer({\n                id: 'mesh-layer',\n               data: [\n                   {\n                       \"name\": \"Lafayette (LAFY)\",\n                       \"code\": \"LF\",\n                       \"address\": \"3601 Deer Hill Road, Lafayette CA 94549\",\n                       \"entries\": \"3481\",\n                       \"exits\": \"3616\",\n                       \"coordinates\": [\n                           -2.9878563941855183,54.51836319674894\n                       ]\n                   }\n               ],\n               mesh: '/textures/paper2.obj',\n               sizeScale: 100,\n               texture: '/textures/looking.jpg',\n               getColor: d => [10, 140, 222],\n               getPosition: d => d.coordinates,\n                getTranslation : [0,0,100],\n               loaders: [OBJLoader],\n\n                //getColor: d => d.color,\n                getOrientation: d => [0, 190, 90]\n            }),\n\n            ///new AnimatedThingLayer({center : [ -2.978496551513672, 54.533135289883056 ]}),\n\n            new TextLayer({\n                id: 'text-layer',\n                data : [1],\n                pickable: true,\n                getPosition: d => [ -2.978496551513672, 54.533135289883056 ],\n                getText: d => 'A fun day out',\n                getSize: 40,\n                sizeUnits : 'meters',\n                getAngle: 32,\n                billboard : false,\n                getTextAnchor: 'middle',\n                fontFamily : 'DJB Sand Shoes and a Fez',\n                getAlignmentBaseline: 'center'\n            })\n\n            ];\n\n        let that = this;\n\n        class Controller extends MapController {\n\n            constructor(props) {\n                super(props);\n            }\n\n            handleEvent(event) {\n\n                super.handleEvent(event);\n                //console.log(event.type);\n                if ((event.type === 'panend' || event.type === 'wheel' )) {\n\n                    const slide = that.props.card.slides[that.props.slideIndex];\n                    that.debounce(() => that.props.updateSlide({variables : {slide_id : slide.id,  data :  {...slide.data, pointB : that.props.slidePhotoRotation}, camera : this.controllerState._viewportProps}}));\n                }\n            }\n        }\n\n        let controller = Controller;\n\n        return (\n            <div>\n\n                <div className=\"Deck\" >\n\n                    <div className=\"poster\">\n                        <DeckGL\n\n                            viewState={this.props.viewState}\n                            //controller={true}\n                            controller={{type: controller, inertia: true, touchRotate : true, dragRotate : true, scrollZoom: true, doubleClickZoom : false}}\n                            _animate={true}\n                            height=\"100%\"\n                            width=\"100%\"\n                            effects={[lightingEffect]}\n                            //effects={[lightingEffect]}\n                            ref={deck => {\n                                this.deckGL = deck;\n                            }}\n\n                            onViewStateChange={({viewId, viewState}) => {\n                                    this.props.setViewState(viewState);\n                            }\n\n                            }\n\n                            layers={layers}/>\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React, {useState, useEffect} from 'react'\nimport Rect from './Rect'\nimport './index.less'\n\nexport default ({width=400, height=200, children}) => {\n\n    return <div className={'overlay'}>\n        {children}\n    </div>\n\n}\n","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport {gpx} from '@mapbox/togeojson'\n\nexport default function MyDropzone({card, updateTripGeojson}) {\n\n    const onDrop = useCallback(acceptedFiles => {\n\n        if (!acceptedFiles[0].name.endsWith('.gpx')) {\n            alert(\"You must upload GPX files\");\n\n            return;\n        }\n\n        var reader = new FileReader();\n\n        reader.onload = function(e) {\n            var readXml=e.target.result;\n\n            var parser = new DOMParser();\n            var doc = parser.parseFromString(readXml, \"application/xml\");\n\n            updateTripGeojson({ variables : {id : card.id, geojson : gpx(doc) }});\n        }\n\n        reader.readAsText(acceptedFiles[0]);\n\n    }, [])\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()}>\n            <input {...getInputProps()} />\n            {\n                isDragActive ? <p>Drop here ...</p> : <button>Add GPS</button>\n            }\n        </div>\n    )\n}\n","import React, {Fragment} from 'react'\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_TRIP_GEOJSON = gql`\n\nmutation MyMutation($id : Int, $geojson : jsonb) {\n\n  update_card(where: {id: {_eq: $id}}, _set: {data: $geojson}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({trip, children, refetch}) => <Mutation\n    onError={() => alert('Could not save trip')}\n    mutation={SAVE_TRIP_GEOJSON}\n    onCompleted={() => refetch()}\n>\n\n    {(updateLandscape, {loading, error}) => {\n\n        return <Fragment>\n            {children(updateLandscape, loading, error)}\n        </Fragment>\n    }}\n</Mutation>\n","import React from 'react'\nimport Frame from './Frame'\nimport AddGPS from './AddGPS'\nimport AddGPSSaver from './AddGPS/saver'\nimport './index.less'\nimport {Mutation} from \"react-apollo\";\n\n// export default () => <Frame width={document.body.clientWidth}>\nexport default ({trip}) => <div className={'Front'}>\n                            <Frame width={450} height={600}>\n                                <h1>Lake District 2021</h1>\n\n\n\n                                <img style={{width : '300px' , height : 'auto'}} src={'/textures/title.png'}/>\n\n                            </Frame>\n                        </div>\n","import React, {useState, useEffect, Fragment} from 'react'\nimport './index.less'\nimport Frame from \"../Front/Frame\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {annotate} from \"rough-notation\"\nconst SAVE_TITLE = gql`\n\nmutation( $card_id : Int,  $title : String){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {title: $title}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_TEXT = gql`\n\nmutation( $card_id : Int,  $text : String){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {text: $text}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\n\nexport default ({card, i}) => {\n\n    const [seconds, setSeconds] = useState(170);\n\n    return <div className={'Title'}>\n\n         <Frame width={350}  height={seconds} >\n\n                     <Mutation onError={() => alert('Could not save title')} mutation={SAVE_TITLE} >\n\n                         {(updateTitle, {loading, error}) => {\n\n                             return <h1 onBlur={(e) => updateTitle({\n                                 variables: {\n                                     title: e.currentTarget.textContent,\n                                     card_id: card.id\n                                 }\n                             })}\n                                 contentEditable suppressContentEditableWarning={true}>\n                                 {card.title}\n                             </h1>\n\n                         } }\n\n                     </Mutation>\n\n                    </Frame>\n\n    </div>\n\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_TABLE = gql`\n\nmutation( $card_id : Int,  $camera : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {camera: $camera}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\nconst SAVE_SLIDE = gql`\n\nmutation( $slide_id : Int,  $camera : jsonb, $data : jsonb){\n                update_card_slide(where: {id: {_eq: $slide_id}}, _set: {data : $data, camera : $camera}) {\n                    returning {\n                                data\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\n\nconst SAVE_SLIDE_MEDIA = gql`\n\nmutation( $slidemedia_id : Int,  $json : jsonb){\n                update_slide_media(where: {id: {_eq: $slidemedia_id}}, _set: {json: $json}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\n\nconst SAVE_MAP = gql`\n\nmutation( $card_id : Int,  $map : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {map: $map}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_ANNOTATION = gql`\n\nmutation( $card_id : Int,  $annotations : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {annotations: $annotations}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_LANDSCAPE = gql`\n\nmutation( $card_id : Int,  $landscapecamera : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {landscapecamera: $landscapecamera}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nexport default ({refetch, children}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not save slide media')}\n            onCompleted={() => refetch()}\n            mutation={SAVE_SLIDE_MEDIA}\n        >\n\n            {(updateSlideMedia, {loading, error}) => {\n\n\n        return <Mutation\n            onError={() => alert('Could not save slide')}\n            mutation={SAVE_SLIDE}\n        >\n\n            {(updateSlide, {loading, error}) => {\n\n\n        return <Mutation\n            onError={() => alert('Could not save map')}\n            mutation={SAVE_MAP}\n        >\n\n            {(updateMap, {loading, error}) => {\n\n                return  <Mutation\n                    onError={() => alert('Could not save camera')}\n                    mutation={SAVE_TABLE}\n                >\n\n                    {(updateCamera, {loading, error}) => {\n\n                        return <Fragment>\n                                    <Mutation\n                                        onError={() => alert('Could not save camera')}\n                                        mutation={SAVE_ANNOTATION}\n                                        onCompleted={() => refetch()}\n                                    >\n\n                                        {(updateAnnotation, {loading, error}) => {\n\n                                            return <Fragment>\n                                                        <Mutation\n                                                            onError={() => alert('Could not save landscaape')}\n                                                            mutation={SAVE_LANDSCAPE}\n                                                            onCompleted={() => refetch()}\n                                                        >\n\n                                                            {(updateLandscape, {loading, error}) => {\n\n                                                                return <Fragment>\n                                                                    {children(updateSlide, updateCamera, updateMap, updateAnnotation, updateLandscape, updateSlideMedia, loading, error)}\n                                                                </Fragment>\n                                                            }}\n                                                        </Mutation>\n                                            </Fragment>\n                                        }}\n                                    </Mutation>\n                        </Fragment>\n                    }}\n                </Mutation>\n\n            }}\n        </Mutation>\n\n            }}\n        </Mutation>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import ProceduralMap from 'procedural-gl-react';\nimport React, {useRef, useEffect} from 'react'\nimport Procedural from 'procedural-gl'\nimport './index.less'\n\nconst datasource = {\n    elevation: {\n        apiKey: '1b045ec93f5b94db894037db8d297128e'\n    },\n    imagery: {\n        urlFormat: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=cZQg2QaktSnI18BSAxZX',\n            attribution: '<a href=\"https://www.maptiler.com/copyright/\">Maptiler</a> <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }\n}\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n\n        let that = this\n        window.setTimeout(() => {\n            //props.setCanvas(that.myRef);\n            Procedural.orbitTarget();\n            //alert(1);\n        }, 3000);\n\n\n\n    }\n\n    render() {\n        return <div className={'Map'}><ProceduralMap\n            ref={this.myRef}\n            datasource={datasource}\n            compassVisible={false}\n            displayLocation={ this.props.location}\n        /></div>\n    }\n}\n\n","import React, {useState, useEffect, Fragment} from 'react'\nimport './index.less'\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_TITLE = gql`\n\nmutation( $card_id : Int,  $data : jsonb){\n                update_card(where: {id: {_eq: $card_id}}, _set: {data: $data}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\nexport default ({card, i}) => {\n\n    return <div className={'blue paper'}>\n\n            <Mutation onError={() => alert('Could not save title')} mutation={SAVE_TITLE} >\n\n                {(updateTitle, {loading, error}) => {\n\n                    return <h1 onBlur={(e) => updateTitle({\n                        variables: {\n                            data: {...card.data, text : e.currentTarget.textContent},\n                            card_id: card.id\n                        }\n                    })}\n                               contentEditable suppressContentEditableWarning={true}>\n                        { card.data.text || 'Enter Text'}\n                    </h1>\n\n                } }\n\n            </Mutation>\n\n    </div>\n\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst CarouselActions = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    align-items: center;\n    justify-content: center;\n    padding: 6px 8px;\n    cursor: pointer;\n`;\n\nexport default CarouselActions;","import React, {useState, useEffect, Fragment} from 'react';\nimport gql from \"graphql-tag\";\nimport {Mutation} from \"react-apollo\";\n\nconst INSERT_SLIDE = gql`\n    mutation MyMutation($card_id : Int, $data : jsonb) {\n    \n      insert_card_slide(objects: {card_id: $card_id, data : $data}) {\n        returning {\n          id\n        }\n      }\n    }\n`;\n\nexport default function ({card, refetch, slideIndex, setSlideIndex}) {\n\n    return (\n\n        <div>\n        {/*we deliberately do not put a camera object in thee data as we dont know if we want to move the camera, which is a slide based action*/}\n            <Mutation\n                onError={() => alert('Could not add slide')}\n                onCompleted={()=> {refetch(); setSlideIndex(slideIndex + 1) }}\n                variables={{ data : {\"text\" : \"Write here\"}}}\n                mutation={INSERT_SLIDE}\n            >\n\n                {(add, {loading, error}) => {\n\n                    return <Fragment>\n                        <button onClick={() => {add({variables : {card_id : card.id}})}}>New slide</button>\n                    </Fragment>\n\n                }}\n            </Mutation>\n\n\n        </div>\n\n    );\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {WebMercatorViewport} from '@deck.gl/core';\nimport * as turf from '@turf/turf'\n\nconst ADD = gql`\n\nmutation UpdateSlide($slide_id : Int, $data : jsonb) {\n  update_card_slide(where: {id: {_eq: $slide_id }}, _set: {data: $data}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({viewState,  slide, refetch}) => {\n\n   // const test = (add, refetch) => {\n\n        const viewport  = new WebMercatorViewport(viewState);\n        //const center    = viewport.unproject([viewport.width/2,viewport.height/2])\n        const tl    = viewport.unproject([0,0])\n        const br    = viewport.unproject([viewport.width/2,viewport.width/2], {topLeft : true}) // make a square\n\n        var pointA = turf.point(tl);\n        var pointB = turf.point(br);\n        //create a bbox that extends to include all the features\n        var bbx = turf.bbox(turf.featureCollection([pointA, pointB]));\n        var pgn = turf.bboxPolygon(bbx);  //convert it to Polygon feature\n\n        //code for making a square around center\n     //   add({onCompleted : () =>{alert(refetch);refetch()}, variables  : {slide_id : slide.id, data : {...slide.data, geojson : {\"type\": \"FeatureCollection\", \"features\": [ pgn]}}}});\n    //}\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add slide photo')}\n            mutation={ADD}\n            variables={{slide_id : slide.id, data : {...slide.data, geojson : {\"type\": \"FeatureCollection\", \"features\": [ pgn]}}}}\n            onCompleted={() => {\n                //alert(refetch);\n                refetch && refetch()}}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <button onClick={ () => add() }>\n                  Add slide photo\n                </button>\n            }}\n        </Mutation>\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {WebMercatorViewport} from '@deck.gl/core';\nimport * as turf from '@turf/turf'\n\nconst ADD = gql`\n\nmutation UpdateSlide($slide_id : Int, $data : jsonb) {\n  update_card_slide(where: {id: {_eq: $slide_id }}, _set: {data: $data}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({viewState,  slide, refetch}) => {\n\n    const test = (add) => {\n\n        //code for making a square around center\n        add({variables  : {slide_id : slide.id, data : {...slide.data, geojson : {\"type\": \"FeatureCollection\", \"features\": [ ]}}}});\n    }\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not remove slide photo')}\n            onCompleted={() => refetch && refetch() }\n            mutation={ADD}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <button onClick={ () => test(add) }>\n                  remove slide photo\n                </button>\n            }}\n        </Mutation>\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SET = gql`\n\nmutation MyMutation($slide_id : Int, $data : jsonb) {\n  update_card_slide(where: {id: {_eq: $slide_id}}, _set: {data: $data}) {\n    returning {\n      id\n    }\n  }\n}\n\n`;\n\nexport default ({slide, media, refetch,  closeModal, pointB}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add title card')}\n            onCompleted={() => closeModal() && refetch && refetch() }\n            mutation={SET}\n            variables={{slide_id : slide.id, data : {...slide.data, pointB : pointB, photo : media.json.url} }}>\n\n            {(set, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ set }>\n                   Set photo\n                </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, { Fragment, useRef, useEffect, useState } from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport AssignPhotoToSlide from './../AssignPhotoToSlide'\n\nconst GETMEDIA = gql`\n               {\n               \n                media {\n                  id\n                  json\n                  location\n                }\n  \n              }\n`\n\nconst App = ({slide, closeModal, pointB}) => {\n\n    return (\n        <div>\n\n                <Query query={GETMEDIA}  >\n                    {({ loading, error, data, refetch  }) => {\n\n                        if (loading || !data) return null\n\n                        return <Fragment>\n                                    <ul>\n                                        {data.media.map(m => <li>\n                                            <img style={{height: '140px', width : 'auto'}} src={m.json.url}/>\n                                            <AssignPhotoToSlide media={m} slide={slide} closeModal={closeModal} pointB={pointB}/>\n                                        </li>)}\n                                    </ul>\n                                </Fragment>\n\n                    }}\n\n                </Query>\n\n        </div>\n    );\n}\n\nexport default App;\n","import React, {Fragment, useState} from 'react';\nimport './index.less'\nimport Query from './Query'\nimport \"wired-elements\";\nimport Modal from 'react-modal';\nimport {WebMercatorViewport} from '@deck.gl/core';\nimport * as turf from \"@turf/turf\";\n\nexport default ({slide, viewState}) => {\n\n    const [modalIsOpen,setIsOpen] = useState(false);\n\n    function openModal() {\n        setIsOpen(true);\n    }\n\n    function closeModal(){\n        setIsOpen(false);\n    }\n\n    const viewport  = new WebMercatorViewport(viewState);\n    const center    = viewport.unproject([viewport.width/2,viewport.width/2], {topLeft : true})\n    const pointB    = { scale : 1, rotation : 1,position : turf.featureCollection([turf.point(center)])};\n\n    return <Fragment>\n\n         <button onClick={openModal}>Open Modal</button>\n\n         <Modal\n             isOpen={modalIsOpen}\n             onRequestClose={closeModal}\n             style={{\n                 content : {\n                     top                   : '50%',\n                     left                  : '50%',\n                     right                 : 'auto',\n                     bottom                : 'auto',\n                     marginRight           : '-50%',\n                     transform             : 'translate(-50%, -50%)'\n                 }\n             }}\n         >\n\n             <button onClick={closeModal}>close</button>\n\n             <Query slide={slide} closeModal={closeModal} pointB={ pointB }/>\n\n         </Modal>\n\n     </Fragment>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {WebMercatorViewport} from '@deck.gl/core';\nimport * as turf from '@turf/turf'\n\nconst ADD = gql`\n\nmutation MyMutation($slide_id : Int) {\n  delete_card_slide(where: {id: {_eq: $slide_id}}) {\n     returning {\n      id\n    }\n  }\n\n}\n\n`;\n\nexport default ({viewState,  slide, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add slide photo')}\n            onCompleted={() => window.location.reload()}\n            mutation={ADD}\n            variables={{slide_id : slide.id}}\n        >\n\n            {(del, {loading, error}) => {\n\n                return <button onClick={ () => del() }>\n                 Delete\n                </button>\n            }}\n        </Mutation>\n    </div>\n}\n","import {Popover, Button, Slider} from 'antd';\nimport React from \"react\";\n\nexport default ({setLocked, slidePhotoRotation, setSlidePhotoRotation}) => {\n\n    const content = (\n        <div>\n            <Slider min={-90} max={90} defaultValue={0} onChange={(e) => setSlidePhotoRotation({...slidePhotoRotation, rotation : e})} />\n            <Slider min={0} max={500} defaultValue={10} onChange={(e) => setSlidePhotoRotation({...slidePhotoRotation, scale : e})} />\n        </div>\n    );\n\n    return <div>\n        <Popover content={content} title=\"Title\" trigger=\"click\" >\n            <Button onClick={() => setLocked(true)}>Click me</Button>\n        </Popover>\n    </div>\n\n}\n","import React from 'react'\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_SLIDE = gql`\n\nmutation( $slide_id : Int,  $data : jsonb){\n                update_card_slide(where: {id: {_eq: $slide_id}}, _set: {data: $data}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\nexport default ({edit, slide, refetch, slideIndex, setSlideIndex}) => <Mutation onError={() => alert('Could not save title')}\n                               onCompleted={() => {refetch();setSlideIndex(slideIndex + 1)}}\n                               mutation={SAVE_SLIDE} >\n\n    {(updateSlide, {loading, error}) => {\n\n        return <div contentEditable={edit} suppressContentEditableWarning={true} onBlur={(e) => updateSlide({\n            variables: {\n                data: {...slide.data, text : e.currentTarget.textContent},\n                slide_id: slide.id\n            }\n        })\n\n        }\n                    contentEditable suppressContentEditableWarning={true}>{slide.data?.text}</div>\n\n    } }\n\n</Mutation>\n","import gql from \"graphql-tag\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { InMemoryCache, HttpLink } from \"apollo-boost\";\nimport { Mutation, ApolloProvider } from \"react-apollo\";\n\nconst MY_MUTATION_MUTATION = gql`\n\n mutation MyMutation($slide_id : Int, $data : jsonb, $type : String) {\n  insert_asset_one(object: {data: $data, slide_id: $slide_id, type : $type}, on_conflict: {constraint: asset_pkey, update_columns: data}) {\n    id\n  }\n}\n`;\n\nconst MyMutationMutation = (props) => {\n\n    const data = {\"scale\":100,\"position\":[-2.96,54.531],\"angle\":50};\n\n    return (\n        <Mutation\n            mutation={MY_MUTATION_MUTATION}\n            onCompleted={() => props.refetch()}\n            variables={{slide_id : props.slide.id, data : data, type : props.type}}>\n            {(MyMutation, { loading, error, data }) => {\n                if (loading) return <pre>Loading</pre>\n\n                if (error)\n                    return (\n                        <pre>\n              Error in MY_MUTATION_MUTATION\n                            {JSON.stringify(error, null, 2)}\n            </pre>\n                    );\n\n                return (\n                    <div>\n\n                        <button onClick={() => MyMutation()}>\n                            Add\n                        </button>\n                    </div>\n                );\n            }}\n        </Mutation>\n    )\n};\n\nexport default  MyMutationMutation;\n","import React, {useState, useEffect} from 'react'\nimport './index.less'\nimport {Mutation} from \"react-apollo\";\nimport Create from './../../Create'\nimport gql from \"graphql-tag\";\nimport {Slider} from 'antd';\nimport AddGPSSaver from \"../../../Cards/Front/AddGPS/saver\";\nimport AddGPS from \"../../../Cards/Front/AddGPS\";\nimport AddPhoto from '../SlideMedia/AddMedia'\nimport RemovePhoto from '../SlideMedia/RemoveMedia'\nimport ListMedia from '../SlideMedia/ListMedia'\nimport DeleteSlide from '../SlideMedia/DeleteSlide'\nimport AdjustRotation from '../SlideMedia/AdjustRotation'\nimport EditText from '../SlideMedia/EditText'\nimport AddAsset from '../SlideMedia/AddAsset'\n\nexport default ({setLocked, card, slide, refetch, slideIndex, setSlideIndex, viewState,slidePhotoRotation, setSlidePhotoRotation}) => {\n\n    const [edit, setEdit] = useState(false);\n\n    return <div className={'slide'} >\n\n        {!edit && slide.data?.text}\n\n        {edit && <EditText slideIndex={slideIndex} edit={edit} slide={slide} refetch={refetch} setSlideIndex={setSlideIndex}/> }\n\n        <DeleteSlide slide={slide} refetch={refetch}/>\n\n        <AddAsset slide={slide} refetch={refetch} viewState={viewState} type={'/textures/arrow2.glb'}/>\n\n        <br/>\n\n        <AdjustRotation setLocked={setLocked} slidePhotoRotation={slidePhotoRotation} setSlidePhotoRotation={setSlidePhotoRotation} slide={slide} refetch={refetch}/>\n\n        <button onClick={() => setEdit(true)}>Edit</button>\n\n        {slideIndex + 1  === card.slides.length && <Create card={card} refetch={refetch} slideIndex={slideIndex} setSlideIndex={setSlideIndex}/> }\n\n        <AddGPSSaver refetch={refetch} >\n            {(updateTripGeojson, {loading, error}) => <AddGPS card={card} updateTripGeojson={updateTripGeojson}/> }\n        </AddGPSSaver>\n\n        {/*<AddPhoto slide={slide} refetch={refetch} viewState={viewState}/>*/}\n\n        {/*<RemovePhoto slide={slide} refetch={refetch} viewState={viewState}/>*/}\n\n        {viewState && <ListMedia slide={slide} refetch={refetch} viewState={viewState} /> }\n\n        <br/>\n\n\n\n    </div>\n\n}\n","import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useSpringCarousel } from 'react-spring-carousel-js';\nimport DeckGL, { ScatterplotLayer, LinearInterpolator, FlyToInterpolator } from \"deck.gl\";\nimport CarouselActions from './CarouselActions';\nimport Frame from './Slide/Frame'\nimport './index.less';\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\n\nfunction Carousel({ slidePhotoRotation, setSlidePhotoRotation, setCurrentPhoto, viewState, setViewState, setSlideIndex, slideIndex, card,refetch, className, style }) {\n\n    const prev = usePrevious({ slides : card.slides.length});\n    const [locked, setLocked] = useState(false);\n\n    const { carouselFragment, getCurrentActiveItem, useListenToCustomEvent, slideToNextItem } = useSpringCarousel({\n        withLoop: false,\n\n        items: card.slides.map((slide, index) => ({\n            id: index,\n            renderItem: <Frame setLocked={setLocked} slidePhotoRotation={slidePhotoRotation} setSlidePhotoRotation={setSlidePhotoRotation} viewState={viewState} card={card} slide={slide} refetch={refetch} slideIndex={slideIndex} setSlideIndex={setSlideIndex}></Frame>\n        }))\n    });\n\n    //if slides increased, move along\n    useEffect(() => {\n        if (prev && card.slides.length > prev.slides) slideToNextItem();\n    }, [card.slides.length]);\n\n    useListenToCustomEvent( 'onSlideStartChange', name => {\n\n        //console.log(card.slides[name.nextItem].camera);\n        setSlideIndex(name.nextItem);\n        setCurrentPhoto(card.slides[name.nextItem].data.geojson); //setting photo geojson state\n\n        card.slides[name.nextItem].camera && setViewState({\n            transitionDuration: 750,\n            transitionInterpolator: new LinearInterpolator(),\n            ...card.slides[name.nextItem].camera});\n    });\n\n    return (\n        <div\n            className={classNames(\n                'carousel',\n                className,\n            )}\n            style={style}\n        >\n\n            <div className=\"carousel-wrapper\">\n                <div style={{ flex: 1 }}>\n                    {carouselFragment}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nCarousel.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    children: PropTypes.node\n};\n\nCarousel.ItemActions = CarouselActions;\n\nexport default Carousel;\n","import React, {Component, useLayoutEffect, useRef, useState} from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport CardSaver from \"./../../Saver\";\nimport Procedural from './Procedural'\nimport Label from './Label'\n\nimport './index.less';\nimport Deck from \"./Deck\";\nimport Slides from \"../../Carousel\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst defaultThing = {rotation : 0, scale : 100, position : {\n                \"type\": \"Feature\",\n                \"properties\": {},\n                \"geometry\": {\n                    \"type\": \"Point\",\n                    \"coordinates\": [\n                        -3.061065673828125,\n                        54.482804559582554\n                    ]\n                }\n            }\n       };\n\nexport default class extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            canvas : null,\n            slideIndex :0,\n            slidePhotoRotation : null,\n            viewState : props.card.slides[0].camera ? props.card.slides[0]?.camera : {longitude : 0, latitude : 50, zoom : 4 },\n            currentPhoto : props.card.slides[0]?.data?.geojson\n        }\n\n    }\n\n    //this should be updated to slidePhotoRotation..it did kind of work\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {slideIndex} = this.state;\n\n        if (prevState.slideIndex !== slideIndex) {\n           // this.setState({ slidePhotoRotation : this.props.card.slides[slideIndex]?.data?.pointB});\n        }\n\n    }\n\n    render() {\n\n        let {currentPhoto, slideIndex, viewState, slidePhotoRotation, canvas} = this.state;\n        let {client} = this.props;\n\n        let setCurrentPhoto         = (p) => this.setState({currentPhoto : p});\n        let setSlideIndex           = (p) => this.setState({slideIndex   : p});\n        let setViewState            = (p) => this.setState({viewState    : p});\n        let setSlidePhotoRotation   = (p) => this.setState({slidePhotoRotation    : p});\n        //let setCanvas               = (p) => this.setState({canvas    : p});\n\n        let props = this.props;\n\n        //let canvas2 = (canvas?.current.el.getElementsByTagName('canvas')[0])\n\n        return <div className=\"sketch-card\">\n                    <div>\n\n                        <Label card={props.card}/>\n\n                        <Procedural location={{animationDuration : 10, longitude: 7.698941573782926, latitude: 45.74338484004915, height: 2183.358398660126, angle: 36.11883143607126, bearing: 70.35532994923864}}/>\n\n                        {true && <CardSaver refetch={props.refetch}>\n\n                            {\n                                (updateSlide, updateMap, updateTable, updateAnnotation, updateLandscape, updateSlideMedia, loading, error) => {\n                                    return <div>\n\n\n\n                                        <Deck  slidePhotoRotation={slidePhotoRotation} setSlidePhotoRotation={setSlidePhotoRotation} client={client} setCurrentPhoto={setCurrentPhoto} currentPhoto={currentPhoto} slideIndex={slideIndex} refetch={props.refetch} viewState={viewState} setViewState={setViewState} width={props.width} updateSlide={updateSlide} updateSlideMedia={updateSlideMedia} updateMap={updateMap} updateAnnotation={updateAnnotation} trip={props.trip} card={props.card} />\n\n                                        <Slides slidePhotoRotation={slidePhotoRotation} setSlidePhotoRotation={setSlidePhotoRotation} setCurrentPhoto={setCurrentPhoto} slideIndex={slideIndex} setSlideIndex={setSlideIndex} viewState={viewState}  setViewState={setViewState} refetch={props.refetch} card={props.card}/>\n\n                                    </div>\n                                }\n                            }\n                        </CardSaver> }\n\n                    </div>\n                </div>\n    }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.less';\n\nfunction MaskModeFrame(props) {\n    return (\n        <div \n            className='mask-mode-frame' \n            style={{ \n                transform: props.rotateDeg !== undefined \n                    ?  `rotate(${props.rotateDeg}deg)`\n                    : undefined\n            }}\n        >\n            <div className=\"mask-mode-frame-img\" >\n                <div>\n                    <img src={props.imgSource} alt=\"\" />\n                </div>\n            </div>\n            {props.ActionComponent && (\n                <div className=\"mask-mode-frame-footer\">\n                    <props.ActionComponent />\n                </div>\n            )}\n        </div>\n    );\n}\n\nMaskModeFrame.propTypes = {\n    imgSource: PropTypes.string.isRequired,\n    rotateDeg: PropTypes.number,\n    ActionComponent: PropTypes.node\n};\n\nexport default MaskModeFrame;\n","export const getRandomDeg = (i) => {\n    if (i % 2 === 0) {\n        return (Math.random() - 1.5) * 4;\n    }\n\n    return (Math.random()) * 8;\n};","import React from 'react';\nimport MaskModeFrame from '../MaskModeFrame';\nimport * as TransformUtils from '../../../../util/transform';\n\nimport './index.less';\n\nexport default function Index({card, refetch}) {\n    return (\n        <div>\n            <div className=\"mask-mode-container\">\n                {card.assets.map((asset, i) => (\n                    <MaskModeFrame \n                        key={i}\n                        imgSource={asset.data ? asset.data.info.url : ''}\n                        rotateDeg={TransformUtils.getRandomDeg(i)}\n                        ActionComponent={() => (\n                            <div className={'Add'}  >\n                                <div contentEditable={true} suppressContentEditableWarning={true}>\n                                    TEST\n                                </div>\n                            </div>\n                        )}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD_FRONT = gql`\n\nmutation MyMutation($trip_id : Int) {\n  insert_cards(objects: {trip_id: $trip_id, type: \"Front\"}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add front card')}\n            onCompleted={() => refetch()}\n            mutation={ADD_FRONT}\n            variables={{trip_id : trip.id}}\n        >\n\n            {(addFront, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ addFront }>\n                            Add Front\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD = gql`\n\nmutation MyMutation($trip_id : Int) {\n  insert_cards(objects: {trip_id: $trip_id, type: \"Title\"}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add title card')}\n            onCompleted={() => refetch()}\n            mutation={ADD}\n            variables={{trip_id : trip.id}}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ add }>\n                            Add Title\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD = gql`\n\nmutation MyMutation($content : jsonb, $trip_id : Int) {\n  insert_cards(objects: {trip_id: $trip_id, type: \"PhotosOnMap\", content : $content}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nconst content = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[4,0],[4,4],[0,4],[0,0]]]},\"properties\":{\"type\":\"map\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[-1.845703125,2.0210651187669897]},\"properties\":{\"type\":\"photo\"}}]};\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add title card')}\n            onCompleted={() => refetch()}\n            mutation={ADD}\n            variables={{content : content, trip_id : trip.id}}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ add }>\n                            Add Photos On Map\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD = gql`\n\nmutation ($content : jsonb, $camera : jsonb, $trip_id : Int, $slide_data : jsonb) {\n\n  insert_card(objects: [\n                {trip_id: $trip_id, type: \"Sketch\", data : $content, slides : {data : [{data : $slide_data, camera : $camera}]}},\n              \n                ]) {\n    returning {\n      id\n    }\n  }\n}\n\n\n\n`;\n\nconst camera = {\"zoom\":3.0129167754311057,\"pitch\":0, \"bearing\":0,\"maxZoom\":20,\"minZoom\":0,\"altitude\":1.5,\"latitude\":8.256043799900645,\"maxBearing\":0,\"minBearing\":0,\"longitude\":2.6226391365730866};\nconst content = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[4,0],[4,4],[0,4],[0,0]]]},\"properties\":{\"type\":\"map\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[-1.845703125,2.0210651187669897]},\"properties\":{\"type\":\"photo\"}}]};\n\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add sketch card')}\n            onCompleted={() => refetch()}\n            mutation={ADD}\n            variables={{ camera : camera, content : content, slide_data : {text : 'Write here'}, trip_id : trip.id }}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ add }>\n                            Add Sketch and photos {trip.name}\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, { Fragment, useState} from 'react'\nimport AddFront     from './AddFront'\nimport AddTitle     from './AddTitle'\nimport AddMap       from './AddMap'\nimport AddSketch    from './AddSketch'\n\nexport default ({trip, refetch}) => {\n\n    const [showButtons, setShowButtons] = useState(false);\n\n    return  <Fragment>\n\n        <wired-button elevation=\"2\" onClick={()=> {\n            setShowButtons(true);\n        }}>\n             Add Content\n        </wired-button>\n\n        {showButtons && <div>\n\n            <AddFront trip={trip} refetch={refetch}/>\n\n            <br/>\n\n            <AddTitle trip={trip} refetch={refetch}/>\n\n            <br/>\n\n            <AddMap trip={trip} refetch={refetch}/>\n\n            <br/>\n\n            <AddSketch trip={trip} refetch={refetch}/>\n\n\n        </div> }\n\n    </Fragment>\n}\n","import React, {Component} from 'react';\nimport RichTextEditor from 'react-rte';\n\nconst toolbarConfig = {\n    // Optionally specify the groups to display (displayed in the order listed).\n    display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'LINK_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n    INLINE_STYLE_BUTTONS: [\n        {label: 'Bold', style: 'BOLD', className: 'custom-css-class'}\n    ],\n    BLOCK_TYPE_DROPDOWN: [\n        {label: 'Normal', style: 'unstyled'},\n        {label: 'Heading Large', style: 'header-one'}\n    ],\n    BLOCK_TYPE_BUTTONS: [\n        {label: 'UL', style: 'unordered-list-item'},\n    ]\n};\n\n\nexport default class MyStatefulEditor extends Component {\n\n\n    state = {\n        value: RichTextEditor.createEmptyValue()\n    }\n\n    onChange = (value) => {\n        this.setState({value});\n        if (this.props.onChange) {\n            // Send the changes up to the parent component as an HTML string.\n            // This is here to demonstrate using `.toString()` but in a real app it\n            // would be better to avoid generating a string on each change.\n            this.props.onChange(\n                value.toString('html')\n            );\n        }\n    };\n\n    render () {\n        return (\n            <RichTextEditor\n\n                value={this.state.value}\n                toolbarConfig={toolbarConfig}\n                onChange={this.onChange}\n            />\n        );\n    }\n}\n","import React, { Fragment, useRef, useEffect, useState } from 'react';\nimport { gsap } from \"gsap\";\nimport './App.less';\n\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\nimport Measure from 'react-measure'\n\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\n\nimport { ApolloProvider } from \"react-apollo\";\n\nimport { Query } from \"react-apollo\";\n\nimport gql from \"graphql-tag\";\n\nimport * as portals from 'react-reverse-portal';\n\nimport {coordEach} from '@turf/meta';\n\nimport AddPhoto  from \"./Components/Photos/Add\";\nimport Deck       from \"./Components/Cards/Sketch/Deck\";\n\nimport Front        from \"./Components/Cards/Front\";\nimport Title        from \"./Components/Cards/Title\";\nimport Sketch     from \"./Components/Cards/Sketch\";\nimport Polaroids  from \"./Components/Cards/Polaroids/HTML\";\n\nimport CardAdder from './Components/Adder';\nimport SimpleRichTextEditor from \"./Components/Cards/Title/Editor\";\n//import CarouselExample from './Components/Carousel/CarouselExample';\n\nconst GETCARD = gql`\n               {\n               \n                media {\n                  id\n                }\n  \n                owners:owner(where: {id: {_eq: \"cyclefriendly\"}}) {\n                  id\n                  \n                  trips(where: {url: {_eq: \"lakes2021\"}}) {\n                    id\n                    name\n                    url\n                    \n                    cards(order_by: {id: asc}) {\n                      id\n                      type\n                      data\n                      \n                      slides(order_by: {id: asc}) {\n                          camera\n                          data\n                          id\n                          assets {\n                                  id\n                                  data\n                                  type\n                          }\n                      }\n                      \n                    }\n                  }\n                }\n              }\n\n`\n\nconst useContainerDimensions = myRef => {\n  const getDimensions = () => ({\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight\n  })\n\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current) {\n      setDimensions(getDimensions())\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [myRef])\n\n  return dimensions;\n};\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst httpLink = new HttpLink({ uri: 'https://guided-viper-73.hasura.app/v1/graphql' });\n\nconst client = new ApolloClient({ link: (httpLink), cache: new InMemoryCache() });\n\nconst App = () => {\n\n  const portalNode2 = React.useMemo(() => portals.createHtmlPortalNode(), []);\n\n  const [loadedCount, setLoadedCount] = useState(0);\n\n  const admin = true;\n\n  //return <SimpleRichTextEditor/>\n return (\n    <div className=\"App\">\n\n      <ApolloProvider client={client}>\n\n        <Query query={GETCARD}  >\n          {({ loading, error, data, refetch  }) => {\n\n            if (loading || !data) return null\n\n            const trip  = data.owners[0].trips[0];\n            const cards = data.owners[0].trips[0].cards;\n            const stillLoading = loadedCount < cards.length;\n\n            trip.cards.forEach(c => {\n              coordEach(c.data, function(coords) {\n                if (coords.length > 2) coords.pop();\n              });\n\n            });\n\n            return <Fragment>\n\n              <Measure bounds>\n\n                {({ measureRef, contentRect: { bounds: { width }} }) => (\n\n                    <div>\n\n                      <h1>{trip.name}</h1>\n\n                      <h2> <AddPhoto refetch={refetch}/> </h2>\n\n                      <main className=\"App-main\">\n\n                      <portals.InPortal node={portalNode2}>\n\n                        <div> this is one time component</div>\n                          {/*updateCard will be overwritten when called in Sketch*/}\n                          {/*<Deck trip={trip} width={width} updateCard={() => alert(\"not implemented\")}/>*/}\n                      </portals.InPortal>\n\n                        {cards.map((card, i) => {\n\n                          if (card.type === 'Front') {\n                            return <div className=\"App-section\" key={i} >\n                                    {admin && <code>{card.id}</code>}\n                                     <Front key={i + '' + card.id} trip={trip} card={card} index={i}/>\n                                   </div>\n                          }\n\n                          if (card.type === 'Title') {\n                            return <div className=\"App-section\" key={i} >\n                              {admin && <code>{card.id}</code>}\n                              <Title key={i + '' + card.id} card={card} i={i}/>\n                            </div>\n                          }\n\n                          if (true && card.type === 'Sketch') {\n\n                            return  <div className=\"App-section\" key={i} >\n                              { admin && <code>{JSON.stringify(card.id)}</code>}\n                              <Sketch client={client} trip={trip} portalNode2={portalNode2} width={width < 500 ? width : 500} admin={admin} stillLoading={stillLoading} incrementLoadedCount={() => setLoadedCount(loadedCount + 1)} key={i + '' + card.id} index={i} card={card} refetch={refetch}/>\n                            </div>\n                          }\n\n                          if (card.type === 'Polaroid') {\n\n                            return  <div className=\"App-section\" key={i} >\n                              {admin && <code>{card.id}</code>}\n                              <Polaroids width={width < 500 ? width : 500} admin={admin} stillLoading={stillLoading} incrementLoadedCount={() => setLoadedCount(loadedCount + 1)} key={i + '' + card.id} index={i} card={card} refetch={refetch}/>\n                            </div>\n                          }\n\n                          return null;\n                        })}\n\n                        <div className=\"xApp-section\" style={{height : '100%'}}>\n                          <CardAdder trip={trip} refetch={refetch}/>\n                        </div>\n\n                        <div ref={measureRef}>My width is {width}</div>\n\n\n\n                      </main>\n                    </div>\n\n                  )}\n              </Measure>\n\n            </Fragment>\n\n          }}\n\n        </Query>\n\n      </ApolloProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\ndocument.fonts.ready.then(function () {\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}