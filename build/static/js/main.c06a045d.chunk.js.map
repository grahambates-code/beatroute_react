{"version":3,"sources":["Components/Landscape/index.js","Components/Deck/layers/CustomPathLayer/path-layer/path-tesselator.js","Components/Deck/layers/CustomPathLayer/path-layer/path.js","Components/Deck/layers/CustomPathLayer/path-layer/path-layer-vertex.glsl.js","Components/Deck/layers/CustomPathLayer/path-layer/path-layer-fragment.glsl.js","Components/Deck/layers/CustomPathLayer/path-layer/path-layer.js","Components/Deck/layers/CustomPathLayer/index.js","Components/Deck/index.js","Components/Cards/Front/Frame/index.js","Components/Cards/Front/AddGPS/index.js","Components/Cards/Front/AddGPS/saver.js","Components/Cards/Front/index.js","Components/Cards/Title/index.js","Components/Saver/index.js","Components/Cards/Sketch/index.js","util/cloudinary.js","Components/Cards/Polaroids/AddPhoto/index.js","Components/Cards/Polaroids/HTML/index.js","Components/Adder/AddFront/index.js","Components/Adder/AddTitle/index.js","Components/Adder/AddMap/index.js","Components/Adder/AddSketch/index.js","Components/Adder/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["props","containerRef","useRef","useEffect","Procedural","init","container","current","datasource","elevation","apiKey","imagery","urlFormat","attribution","card","landscapecamera","target","longitude","latitude","angle","displayLocation","onUserInteraction","console","log","onLocationFocused","setTimeout","orbitTarget","className","src","ref","PathTesselator","opts","attributes","positions","size","padding","initialize","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","buffer","this","normalize","path","gridResolution","wrapLongitude","flatPath","Array","isArray","length","i","j","cutPolylineByGrid","cutPolylineByMercatorBounds","normalizePath","positionSize","resolution","attributeName","subPath","getGeometrySize","numPoints","getPathLength","isClosed","context","geometrySize","updateGeometryAttributes","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","ptIndex","getPointOnPath","index","loop","lastPointIndex","Tesselator","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","rounded","miterLimit","billboard","_pathType","getPath","object","getColor","getWidth","ATTRIBUTE_TRANSITION","enter","chunk","subarray","PathLayer","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","vertexOffset","GL","DOUBLE","use64bitPositions","transition","accessor","update","calculatePositions","noAlloc","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","UNSIGNED_BYTE","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","colorFormat","normalized","instancePickingColors","encodePickingColor","__source","setState","pathTesselator","getDashArray","extensions","removed","oldProps","changeFlags","attributeManager","dataChanged","updateTriggersChanged","all","state","buffers","data","updateGeometry","geometryBuffer","getGeometry","positionFormat","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","delete","_getModel","params","info","find","d","uniforms","widthMultiplier","metersPerPixel","setUniforms","Object","assign","jointType","draw","Model","getShaders","id","geometry","Geometry","drawMode","TRIANGLES","indices","Uint16Array","isInstanced","attribute","get","Layer","layerName","filterCall","vertexShaderParts","split","vertexShader","fragmentShaderParts","fragmentShader","CustomPathLayer","start","your","free","trial","now","getLengths","lengthSoFar","fu","map","point","points","Math","sqrt","prototype","call","lengths","instanceLengths","instanceNextLengths","myFeatureCollection","features","myBox","search","_","debounce","e","annotations","viewState","camera","zoom","x","coordinates","layers","TileLayer","tileSize","onClick","updateLandscape","variables","card_id","coordinate","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","desaturate","opacity","transparentColor","image","bounds","pickable","GeoJsonLayer","trip","geojson","stroked","getElevation","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getLineColor","getRadius","getLineWidth","_subLayerProps","EditableGeoJsonLayer","mode","TransformMode","selectedFeatureIndexes","getFillColor","feature","onEdit","event","editType","updatedData","that","controller","updateCard","controllerState","_viewportProps","MapController","touchRotate","dragRotate","scrollZoom","doubleClickZoom","_animate","height","width","deck","deckGL","onViewStateChange","viewId","setViewState","Component","children","MyDropzone","updateTripGeojson","onDrop","useCallback","acceptedFiles","name","endsWith","reader","FileReader","onload","readXml","result","doc","DOMParser","parseFromString","gpx","readAsText","alert","useDropzone","getRootProps","getInputProps","isDragActive","SAVE_TRIP_GEOJSON","gql","onError","mutation","loading","error","style","SAVE_TITLE","SAVE_TEXT","useState","seconds","updateTitle","onBlur","title","currentTarget","textContent","contentEditable","suppressContentEditableWarning","onChange","text","SAVE_TABLE","SAVE_MAP","SAVE_ANNOTATION","SAVE_LANDSCAPE","refetch","updateMap","updateCamera","updateAnnotation","onCompleted","gsap","registerPlugin","ScrollTrigger","RenderingCard","inViewport","setInViewport","useLayoutEffect","scroller","create","trigger","end","onEnter","onEnterBack","onLeave","onLeaveBack","scrub","kill","node","portalNode2","url","publicId","options","scOptions","Util","withSnakeCaseKeys","CoreCloudinary","new","imageTag","setter","a","cloudName","format","version","ceil","Date","getTime","urlPath","toString","fetch","then","res","JSON","parse","resources","public_id","catch","err","SAVE_PHOTO","AddPhoto","images","setImages","beginUpload","tag","cb","callback","window","cloudinary","openUploadWidget","tags","uploadPreset","photos","objects","fetchPhotos","message","savephoto","Index","getRandomDeg","random","transform","assets","alt","ADD_FRONT","trip_id","addFront","ADD","add","content","polaroid_camera","showButtons","setShowButtons","AddFront","AddTitle","AddMap","AddSketch","GETCARD","httpLink","HttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","App","portalNode","React","useMemo","portals","loadedCount","setLoadedCount","admin","query","owners","trips","cards","stillLoading","coordEach","coords","pop","measureRef","contentRect","stringify","incrementLoadedCount","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c06a045d.chunk.js","sourcesContent":["import React, {Component, useRef, useEffect} from 'react'\nimport Procedural from 'procedural-gl'\nimport './index.less'\n\nexport default (props) => {\n\n    const containerRef = useRef(null);\n\n    const didMountRef = useRef(false)\n\n    useEffect(() => {\n\n        Procedural.init( {\n            container: containerRef.current,\n            datasource: {\n                elevation: {\n                    apiKey: '1b045ec93f5b94db894037db8d297128e'\n                },\n                imagery: {\n                    urlFormat: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=cZQg2QaktSnI18BSAxZX',\n                    attribution: '<a href=\"https://www.maptiler.com/copyright/\">Maptiler</a> <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                }\n            }\n        } );\n\n\n\n\n    }, []);\n\n    useEffect(() => {\n\n        if (props.card && props.card.landscapecamera) {\n\n            var target = {\n                longitude: props.card.landscapecamera[0],\n                latitude: props.card.landscapecamera[1],\n                angle: 20\n            };\n\n            Procedural.displayLocation(target);\n\n            // Procedural.orbitTarget();\n        }\n\n\n        Procedural.onUserInteraction = function () {\n            console.log(props);\n        }\n\n        Procedural.onLocationFocused = function () {\n            console.log('Location focused');\n        };\n\n       // if (didMountRef.current) {\n            setTimeout(() => Procedural.orbitTarget(), 1000);\n       // } else didMountRef.current = true\n\n    }, [props.card?.landscapecamera])\n\n    return <div>\n\n        <img className={'balloon'} src={'/textures/balloon.png'}/>\n\n        <div className=\"map-mode-container\">\n                <div>\n                    <div className=\"mask-mode\" >\n                        <div >\n                            <div ref={containerRef} className={'Procedural'}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    </div>\n\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (Array.isArray(path[0])) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && Array.isArray(path[0])) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  /* Utilities */\n  // Returns the number of points in the path\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  // Returns a point on the path at the specified index\n  getPointOnPath(path, index, target = []) {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n","import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\n/** Returns a flat array of path positions\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n */\nexport function normalizePath(path, size, gridResolution, wrapLongitude) {\n  let flatPath = path;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\nuniform bool billboard;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 lineJoin(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * jointType * 4.0 * flipIfTrue(isStartCap), isJoint);\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return currPoint + offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.worldPosition = instanceStartPositions;\n  geometry.worldPositionAlt = instanceEndPositions;\n  geometry.pickingColor = instancePickingColors;\n\n  vec2 widthPixels = vec2(clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0);\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  if (billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    vec2 width = project_pixel_size_to_clipspace(widthPixels);\n\n    vec3 pos = lineJoin(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      width\n    );\n\n    gl_Position = vec4(pos * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    vec2 width = project_pixel_size(widthPixels);\n\n    vec4 pos = vec4(\n      lineJoin(prevPosition, currPosition, nextPosition, width),\n      1.0);\n    geometry.position = pos;\n    gl_Position = project_common_position_to_clipspace(pos);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float jointType;\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (jointType > 0.0 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (jointType == 0.0 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  rounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    if (data[0] && data[0].__source) {\n      // data is wrapped\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      rounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          jointType: Number(rounded),\n          billboard,\n          widthScale: widthScale * widthMultiplier,\n          miterLimit,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n","import {Layer, project32, picking} from '@deck.gl/core';\r\nimport PathLayer from './path-layer/path-layer.js';\r\n\r\nimport vs from './path-layer/path-layer-vertex.glsl';\r\nimport fs from './path-layer/path-layer-fragment.glsl';\r\n\r\n// re-use joint code\r\nconst filterCall = 'DECKGL_FILTER_COLOR';\r\n\r\nconst vertexShaderParts = vs.split(filterCall);\r\nconst vertexShader = `\r\n\t\tattribute float instanceLengths;\r\n\t\tattribute float instanceNextLengths;\r\n\t\tvarying float vLength;\r\n\t` +\r\n\tvertexShaderParts[0] + `\r\n\t\tvLength = instanceLengths + (instanceNextLengths - instanceLengths) * vPathPosition.y / vPathLength;\r\n\t` +\r\n\tfilterCall +\r\n\tvertexShaderParts[1];\r\n\r\nconst fragmentShaderParts = fs.split(filterCall);\r\nconst fragmentShader = `\r\n\t\tvarying float vLength;\r\n\t` +\r\n\tfragmentShaderParts[0] + `\r\n\t\tfloat a = 0.0;\r\n\t\tfor (int i = 1; i < 4; i++) {\r\n\t\t\tfloat w = 0.2 / float(i);\r\n\t\t\tfloat s = sin( 12345.6 * vLength / (8.7 - float(i)) + float(i) );\r\n\t\t\tfloat d = abs( (1.0 - 2.0 * w) * s - vPathPosition.x );\r\n\t\t\ta = max( a, smoothstep(w, w - 0.05, d) );\r\n\t\t}\r\n\t\tgl_FragColor.a = a;\r\n\t` +\r\n\tfilterCall +\r\n\tfragmentShaderParts[1];\r\n\r\nexport default class CustomPathLayer extends PathLayer {\r\n\tconstructor(start, your, free, trial, now) {\r\n\t\tstart.getLengths = (data) => {\r\n\t\t\tlet lengthSoFar = 0;\r\n\t\t\tlet fu = this.props.getPath(data).map(function(point, index, points) {\r\n\t\t\t\tlengthSoFar += index ? Math.sqrt(\r\n\t\t\t\t\t(point[0] - points[index - 1][0])**2 +\r\n\t\t\t\t\t(point[1] - points[index - 1][1])**2\r\n\t\t\t\t) : 0;\r\n\t\t\t\treturn lengthSoFar;\r\n\t\t\t});\r\n\t\t\tconsole.log(fu);\r\n\t\t\treturn fu;\r\n\t\t}\r\n\r\n\t\tsuper(start, your, free, trial, now);\r\n\t}\r\n\tgetShaders() {\r\n\t\treturn Layer.prototype.getShaders.call(this, {vs: vertexShader, fs: fragmentShader, modules: [project32, picking]});\r\n\t}\r\n\r\n\tinitializeState(params) {\r\n\t\tsuper.initializeState(params);\r\n\r\n\t\tconst attributeManager = this.getAttributeManager();\r\n\t\tattributeManager.addInstanced({\r\n\t\t\tlengths: {\r\n\t\t\t\tsize: 1,\r\n\t\t\t\taccessor: 'getLengths',\r\n\t\t\t\tshaderAttributes: {\r\n\t\t\t\t\tinstanceLengths: {\r\n\t\t\t\t\t\tvertexOffset: 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\tinstanceNextLengths: {\r\n\t\t\t\t\t\tvertexOffset: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import React, {Fragment, useState} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {MapController, LinearInterpolator, FlyToInterpolator} from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport {TileLayer} from '@deck.gl/geo-layers';\nimport {Component} from 'react';\nimport * as turf from \"@turf/turf\";\n\nimport Landscape from './../Landscape'\nimport _ from \"lodash\";\nimport './index.less';\nimport CustomPathLayer from './layers/CustomPathLayer'\nimport {DrawLineStringMode, EditableGeoJsonLayer, ScaleMode, ModifyMode, RotateMode, TransformMode, ViewMode} from \"nebula.gl\";\n\nconst myFeatureCollection = {\n    type: 'FeatureCollection',\n    features: [\n        /* insert features here */\n    ],\n};\n\nconst myBox = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -2.951202392578125,\n                            54.48659397984652\n                        ],\n                        [\n                            -2.8176498413085938,\n                            54.48659397984652\n                        ],\n                        [\n                            -2.8176498413085938,\n                            54.52825442998894\n                        ],\n                        [\n                            -2.951202392578125,\n                            54.52825442998894\n                        ],\n                        [\n                            -2.951202392578125,\n                            54.48659397984652\n                        ]\n                    ]\n                ]\n            }\n        }\n    ]\n};\n\nexport default class extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.search = _.debounce(e => e(), 300);\n\n        // this.defaultViewstate = {map : props.card.camera || {longitude : 1, latitude : 1, zoom : 1}};\n\n        this.state = {\n            myBox : myBox,\n            data: props.card && props.card.annotations ? props.card.annotations : myFeatureCollection,\n            viewState: props.card && props.card.camera ? props.card.camera : {longitude: 1, latitude: 1, zoom: 1}\n        }\n\n        let that = this;\n\n    }\n\n    render() {\n\n        let x = this.state.myBox.features[0].geometry.coordinates[0];\n\n        let layers = [\n\n            new TileLayer({\n                id: 'TileLayer',\n                data: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',\n                tileSize: 256,\n                onClick : (e) => {\n                    this.props.updateLandscape({variables : {card_id : this.props.card.id, landscapecamera : e.coordinate}});\n                },\n                renderSubLayers: props => {\n                    const {\n                        bbox: {west, south, east, north}\n                    } = props.tile;\n\n                    return new BitmapLayer(props, {\n                        data: null,\n                        desaturate : 1,\n                        opacity : 0.7,\n                        transparentColor : [0,0,0,0],\n                        image: props.data,\n                        bounds: [west, south, east, north]\n                    });\n                },\n                pickable: true,\n            }),\n\n            new GeoJsonLayer({\n                id: 'geojson-layer',\n                data : this.props.trip.geojson,\n                pickable: true,\n                stroked: false,\n                getElevation : 1,\n                lineWidthScale: 20,\n                lineWidthMinPixels: 4,\n                lineWidthMaxPixels: 8,\n                getLineColor: [255, 238,0, 255],\n                getRadius: 100,\n                getLineWidth: 1,\n\n                _subLayerProps: {\n                    \"line-strings\": {type: CustomPathLayer},\n                }\n\n            }),\n\n            new EditableGeoJsonLayer({\n                id: 'mask-geojson-layer-linestring',\n                data: this.state.myBox,\n                opacity : 1,\n                mode: TransformMode,\n                selectedFeatureIndexes: [0],\n\n                _subLayerProps: {\n                    geojson: {\n                        getFillColor: (feature) => [255,255,255,0],\n                        getLineColor: (feature) => [255,255,255,0],\n                    }\n                },\n\n                onEdit: (event) => {\n\n                    //console.log(event);\n\n                    const { editType, updatedData } = event;\n                    //if (editType !== \"movePosition\") {\n                        this.setState({myBox : updatedData});\n                    //}\n                }\n            }),\n\n            new BitmapLayer({\n                opacity : 1,\n                id: 'mask-arrow-layer',\n                bounds: [x[0], x[3], x[2], x[1]],\n                image : '/textures/tape2.png'\n            })\n\n        ];\n\n      //  console.log((this.state.myBox));\n        let that = this;\n\n        class Controller extends MapController {\n\n            constructor(props) {\n                super(props);\n            }\n\n            handleEvent(event) {\n\n                super.handleEvent(event);\n\n                if ((event.type === 'panend' || event.type === 'wheel' )) {\n                    that.search(() => that.props.updateCard({variables : {card_id : that.props.card.id, camera : this.controllerState._viewportProps}}));\n                }\n            }\n        }\n\n        let controller = Controller;\n\n\n        return (\n            <div>\n\n                <div className=\"Deck\" >\n\n                    <DeckGL\n\n                        viewState={this.props.viewState}\n                        controller={{type: controller, touchRotate : false, dragRotate : false, scrollZoom: true, doubleClickZoom : false}}\n                        _animate={false}\n                        height=\"100%\"\n                        width=\"100%\"\n\n                        ref={deck => {\n                            this.deckGL = deck;\n                        }}\n\n                        onViewStateChange={({viewId, viewState}) => {\n                                this.props.setViewState(viewState);\n                        }\n\n                        }\n\n                        layers={layers}/>\n\n                </div>\n\n                <Landscape card={this.props.card}/>\n            </div>\n        );\n    }\n}\n","import React, {useState, useEffect} from 'react'\nimport Rect from './Rect'\nimport './index.less'\n\nexport default ({width=400, height=200, children}) => {\n\n    return <div className={'overlay'}>\n        {children}\n    </div>\n\n}\n","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport {gpx} from '@mapbox/togeojson'\n\nexport default function MyDropzone({trip, updateTripGeojson}) {\n\n    const onDrop = useCallback(acceptedFiles => {\n\n        if (!acceptedFiles[0].name.endsWith('.gpx')) {\n            alert(\"You must upload GPX files\");\n\n            return;\n        }\n\n        var reader = new FileReader();\n\n        reader.onload = function(e) {\n            var readXml=e.target.result;\n\n            var parser = new DOMParser();\n            var doc = parser.parseFromString(readXml, \"application/xml\");\n\n            updateTripGeojson({ variables : {id : trip.id, geojson : gpx(doc) }});\n        }\n\n        reader.readAsText(acceptedFiles[0]);\n\n    }, [])\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()}>\n            <input {...getInputProps()} />\n            {\n                isDragActive ? <p>Drop here ...</p> : <button>Add GPS</button>\n            }\n        </div>\n    )\n}\n","import React, {Fragment} from 'react'\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_TRIP_GEOJSON = gql`\n\nmutation MyMutation($id : Int, $geojson : jsonb) {\n\n  update_trip(where: {id: {_eq: $id}}, _set: {geojson: $geojson}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({trip, children}) => <Mutation\n    onError={() => alert('Could not save trip')}\n    mutation={SAVE_TRIP_GEOJSON}\n    //onCompleted={() => refetch()}\n>\n\n    {(updateLandscape, {loading, error}) => {\n\n        return <Fragment>\n            {children(updateLandscape, loading, error)}\n        </Fragment>\n    }}\n</Mutation>\n","import React from 'react'\nimport Frame from './Frame'\nimport AddGPS from './AddGPS'\nimport AddGPSSaver from './AddGPS/saver'\nimport './index.less'\nimport {Mutation} from \"react-apollo\";\n\n// export default () => <Frame width={document.body.clientWidth}>\nexport default ({trip}) => <div className={'Front'}>\n                            <Frame width={450} height={600}>\n                                <h1>Lake District 2021</h1>\n\n                                <AddGPSSaver>\n                                    {(updateTripGeojson, {loading, error}) => <AddGPS trip={trip} updateTripGeojson={updateTripGeojson}/> }\n                                </AddGPSSaver>\n\n                                <img style={{width : '300px' , height : 'auto'}} src={'/textures/title.png'}/>\n\n                            </Frame>\n                        </div>\n","import React, {useState, useEffect, Fragment} from 'react'\nimport './index.less'\nimport Frame from \"../Front/Frame\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_TITLE = gql`\n\nmutation( $card_id : Int,  $title : String){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {title: $title}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_TEXT = gql`\n\nmutation( $card_id : Int,  $text : String){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {text: $text}) {\n                    returning {\n                                id\n                              }\n                    }\n                }\n`;\n\n\nexport default ({card, i}) => {\n\n    const [seconds, setSeconds] = useState(170);\n\n    return <div className={'Title'}>\n\n         <Frame width={350}  height={seconds} >\n\n                     <Mutation onError={() => alert('Could not save title')} mutation={SAVE_TITLE} >\n\n                         {(updateTitle, {loading, error}) => {\n\n                             return <h1 onBlur={(e) => updateTitle({\n                                 variables: {\n                                     title: e.currentTarget.textContent,\n                                     card_id: card.id\n                                 }\n                             })}\n                                 contentEditable suppressContentEditableWarning={true}>\n                                 {card.title}\n                             </h1>\n\n                         } }\n\n                     </Mutation>\n\n\n                     <Mutation onError={() => alert('Could not save text')} mutation={SAVE_TEXT} >\n\n                         {(updateTitle, {loading, error}) => {\n\n                             return <TextareaAutosize\n                                 onChange={(e) => {\n\n                                     updateTitle({\n                                         variables: {\n                                             text: e.currentTarget.value,\n                                             card_id: card.id\n                                         }\n                                     })\n                                 }}\n                                 defaultValue={card.text}></TextareaAutosize>\n\n                         } }\n\n                     </Mutation>\n\n\n                        {/*<TextareaAutosize onHeightChange={(height)=> {*/}\n                        {/*    setSeconds(height < 48 ? 170 : height + 150);*/}\n                        {/*} }>*/}\n\n                        {/*    Type your text here </TextareaAutosize>*/}\n                    </Frame>\n\n    </div>\n\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SAVE_TABLE = gql`\n\nmutation( $card_id : Int,  $camera : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {camera: $camera}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_MAP = gql`\n\nmutation( $card_id : Int,  $map : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {map: $map}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_ANNOTATION = gql`\n\nmutation( $card_id : Int,  $annotations : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {annotations: $annotations}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nconst SAVE_LANDSCAPE = gql`\n\nmutation( $card_id : Int,  $landscapecamera : jsonb){\n                update_cards(where: {id: {_eq: $card_id}}, _set: {landscapecamera: $landscapecamera}) {\n                    returning {\n                                camera\n                                id\n                              }\n                    }\n                }\n`;\n\nexport default ({refetch, children}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not save map')}\n            mutation={SAVE_MAP}\n        >\n\n            {(updateMap, {loading, error}) => {\n\n                return  <Mutation\n                    onError={() => alert('Could not save camera')}\n                    mutation={SAVE_TABLE}\n                >\n\n                    {(updateCamera, {loading, error}) => {\n\n                        return <Fragment>\n                                    <Mutation\n                                        onError={() => alert('Could not save camera')}\n                                        mutation={SAVE_ANNOTATION}\n                                    >\n\n                                        {(updateAnnotation, {loading, error}) => {\n\n                                            return <Fragment>\n                                                        <Mutation\n                                                            onError={() => alert('Could not save landscaape')}\n                                                            mutation={SAVE_LANDSCAPE}\n                                                            onCompleted={() => refetch()}\n                                                        >\n\n                                                            {(updateLandscape, {loading, error}) => {\n\n                                                                return <Fragment>\n                                                                    {children(updateCamera, updateMap, updateAnnotation, updateLandscape, loading, error)}\n                                                                </Fragment>\n                                                            }}\n                                                        </Mutation>\n                                            </Fragment>\n                                        }}\n                                    </Mutation>\n                        </Fragment>\n                    }}\n                </Mutation>\n\n            }}\n        </Mutation>\n\n\n    </div>\n}\n","import React, { useLayoutEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as portals from \"react-reverse-portal\";\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport CardSaver from \"./../../Saver\";\n\nimport './index.less';\n\ngsap.registerPlugin(ScrollTrigger);\n\nfunction RenderingCard(props) {\n\n    const [inViewport, setInViewport]   = useState(false);\n    const [viewState, setViewState]     = useState(props.card.camera);\n\n    const ref = useRef();\n\n    useLayoutEffect(() => {\n        const scroller =  ScrollTrigger.create({\n            trigger: ref.current,\n            start: () => 'top bottom',\n            end: () => 'bottom top',\n            onEnter: () => {\n                setInViewport(true);\n            },\n            onEnterBack: () => {\n                setInViewport(true);\n            },\n            onLeave: () => {\n                setInViewport(false);\n            },\n            onLeaveBack: () => {\n                setInViewport(false);\n            },\n            scrub: 1\n        });\n\n        return () => {\n            scroller.kill();\n        }\n    });\n\n    return (\n        <div className=\"sketch-card\" ref={ref}>\n            <div className=\"rendering-card-content\">\n\n                <CardSaver refetch={props.refetch}>\n\n                    {\n                        (updateCard, updateMap, updateAnnotation, updateLandscape, loading, error) => {\n                            return <div className={'Sketch'}>\n                                {inViewport ? <portals.OutPortal viewState={viewState} setViewState={setViewState} node={props.portalNode2} updateLandscape={updateLandscape} updateCard={updateCard} trip={props.trip} card={props.card}  /> : null}\n                            </div>\n                        }\n                    }\n                </CardSaver>\n\n\n            </div>\n        </div>\n    );\n}\n\nRenderingCard.propTypes = {\n    card: PropTypes.any,\n};\n\nexport default RenderingCard;\n","import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\n\nexport const url = (publicId, options) => {\n    const scOptions = Util.withSnakeCaseKeys(options);\n    const cl = CoreCloudinary.new();\n    return cl.url(publicId, scOptions);\n};\n\nexport const openUploadWidget = (options, callback) => {\n    const scOptions = Util.withSnakeCaseKeys(options);\n    window.cloudinary.openUploadWidget(scOptions, callback);\n};\n\nexport async function  fetchPhotos  (imageTag, setter)  {\n    const options = {\n        cloudName: 'db8uwhsbg',\n        format: 'json',\n        type: 'list',\n        version: Math.ceil(new Date().getTime() / 1000),\n    };\n\n    const urlPath = url(imageTag.toString(), options);\n\n    fetch(urlPath)\n        .then(res => res.text())\n        .then(text => (text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []))\n        .catch(err => console.log(err));\n};\n","import React, {useState, useEffect, Fragment} from 'react';\nimport { CloudinaryContext, Image } from \"cloudinary-react\";\nimport { fetchPhotos, openUploadWidget } from \"../../../../util/cloudinary\";\nimport gql from \"graphql-tag\";\nimport {Mutation} from \"react-apollo\";\n\nconst SAVE_PHOTO = gql`\n   mutation insert_card_asset($objects: [card_asset_insert_input!]! ) {\n        insert_card_asset(objects: $objects) {\n            returning {\n                id\n            }\n        }\n    }\n`;\n\nfunction AddPhoto({card, refetch}) {\n\n    const [images, setImages] = useState([])\n\n    const beginUpload = (tag, cb) => {\n\n        const uploadOptions = {\n            cloudName: \"db8uwhsbg\",\n            tags: [tag, 'beatroute'],\n            uploadPreset: \"ml_default\"\n        };\n\n        openUploadWidget(uploadOptions, (error, photos) => {\n            if (!error) {\n\n                if(photos.event === 'success'){\n\n                    cb({variables : {objects :  [photos].map(p => ({card_id : card.id, type :\"PHOTO\", data :p}))}});\n\n                    setImages([...images, photos])\n                }\n            } else {\n                console.log(error);\n            }\n        })\n    }\n\n    useEffect( () => {\n        fetchPhotos(\"image\", setImages);\n    }, [])\n\n    return (\n\n        <div>\n\n            <Mutation\n                onError={() => alert({message: 'Could not add photo'})}\n                onCompleted={()=> {refetch()}}\n                mutation={SAVE_PHOTO}\n            >\n\n                {(savephoto, {loading, error}) => {\n\n                    return <Fragment>\n                        <button onClick={() => beginUpload(\"image\", savephoto)}>Upload Image</button>\n                    </Fragment>\n\n                }}\n            </Mutation>\n\n\n        </div>\n\n    );\n}\n\nexport default AddPhoto;\n\n","import React from 'react';\n\nimport './index.less';\nimport AddPhoto from \"../AddPhoto\";\n\nexport default function Index({card, refetch}) {\n    const getRandomDeg = (i) => {\n        if (i % 2 === 0) return (Math.random() - 1.5) * 4;\n\n        return (Math.random()) * 8;\n\n    };\n\n    console.log(card);\n\n    return (\n        <div className=\"mask-mode-container\">\n\n            {Array(1).fill(1).map((_, i) => (\n                <div key={i}  className='frame' style={{ transform: `rotate(${getRandomDeg(i)}deg)`}}>\n                    <div className=\"mask-mode\" >\n                       <div style={{width : '100%'}}>\n                           { card.assets.length === 0 && <img src={process.env.PUBLIC_URL + '/textures/blank_polaroid_black.png'} alt=\"\" /> }\n                           { card.assets.length === 1 && <img src={card.assets[0].data.info.url} alt=\"\" /> }\n\n                       </div>\n                    </div>\n                </div>\n            ))}\n\n            <div className={'Add'}>\n                <AddPhoto card={card} refetch={refetch}/>\n            </div>\n        </div>\n    );\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD_FRONT = gql`\n\nmutation MyMutation($trip_id : Int) {\n  insert_cards(objects: {trip_id: $trip_id, type: \"Front\"}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add front card')}\n            onCompleted={() => refetch()}\n            mutation={ADD_FRONT}\n            variables={{trip_id : trip.id}}\n        >\n\n            {(addFront, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ addFront }>\n                            Add Front\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD = gql`\n\nmutation MyMutation($trip_id : Int) {\n  insert_cards(objects: {trip_id: $trip_id, type: \"Title\"}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add title card')}\n            onCompleted={() => refetch()}\n            mutation={ADD}\n            variables={{trip_id : trip.id}}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ add }>\n                            Add Title\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD = gql`\n\nmutation MyMutation($content : jsonb, $trip_id : Int) {\n  insert_cards(objects: {trip_id: $trip_id, type: \"PhotosOnMap\", content : $content}) {\n    returning {\n      id\n    }\n  }\n}\n`;\n\nconst content = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[4,0],[4,4],[0,4],[0,0]]]},\"properties\":{\"type\":\"map\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[-1.845703125,2.0210651187669897]},\"properties\":{\"type\":\"photo\"}}]};\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add title card')}\n            onCompleted={() => refetch()}\n            mutation={ADD}\n            variables={{content : content, trip_id : trip.id}}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ add }>\n                            Add Photos On Map\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, {Fragment} from 'react';\nimport {Mutation} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst ADD = gql`\n\nmutation ($content : jsonb, $camera : jsonb, $polaroid_camera : jsonb, $trip_id : Int) {\n\n  insert_cards(objects: [\n                {trip_id: $trip_id, type: \"Title\", content : $content, camera : $camera},\n                {trip_id: $trip_id, type: \"Sketch\", content : $content, camera : $camera},\n                {trip_id: $trip_id, type: \"Landscape\", content : $content, camera : $polaroid_camera},\n                {trip_id: $trip_id, type: \"Polaroid\", content : $content, camera : $polaroid_camera},\n              \n                ]) {\n    returning {\n      id\n    }\n  }\n}\n\n\n\n`;\n\nconst camera = {\"zoom\":3.0129167754311057,\"pitch\":0,\"width\":500,\"height\":600,\"bearing\":0,\"maxZoom\":20,\"minZoom\":0,\"altitude\":1.5,\"latitude\":8.256043799900645,\"maxBearing\":0,\"minBearing\":0,\"longitude\":2.6226391365730866};\nconst content = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[4,0],[4,4],[0,4],[0,0]]]},\"properties\":{\"type\":\"map\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[-1.845703125,2.0210651187669897]},\"properties\":{\"type\":\"photo\"}}]};\n\nconst polaroid_camera = {\"zoom\":2.0340441946918117,\"target\":[21.82497956377069,41.576120620825634, 0],\"maxZoom\":20,\"minZoom\":0,\"orbitAxis\":\"Z\",\"rotationX\":0,\"maxRotationX\":90,\"minRotationX\":-90,\"rotationOrbit\":0};\n\nexport default ({trip, refetch}) => {\n\n    return <div>\n\n        <Mutation\n            onError={() => alert('Could not add sketch card')}\n            onCompleted={() => refetch()}\n            mutation={ADD}\n            variables={{content : content, camera : camera, trip_id : trip.id, polaroid_camera : polaroid_camera}}\n        >\n\n            {(add, {loading, error}) => {\n\n                return <wired-button elevation=\"2\" onClick={ add }>\n                            Add Sketch and photos {trip.name}\n                        </wired-button>\n\n            }}\n        </Mutation>\n\n    </div>\n}\n","import React, { Fragment, useState} from 'react'\nimport AddFront     from './AddFront'\nimport AddTitle     from './AddTitle'\nimport AddMap       from './AddMap'\nimport AddSketch    from './AddSketch'\n\nexport default ({trip, refetch}) => {\n\n    const [showButtons, setShowButtons] = useState(false);\n\n    return  <Fragment>\n\n        <wired-button elevation=\"2\" onClick={()=> {\n            setShowButtons(true);\n        }}>\n             Add Content\n        </wired-button>\n\n        {showButtons && <div>\n\n            <AddFront trip={trip} refetch={refetch}/>\n\n            <br/>\n\n            <AddTitle trip={trip} refetch={refetch}/>\n\n            <br/>\n\n            <AddMap trip={trip} refetch={refetch}/>\n\n            <br/>\n\n            <AddSketch trip={trip} refetch={refetch}/>\n\n\n        </div> }\n\n    </Fragment>\n}\n","import React, { Fragment, useRef, useEffect, useState } from 'react';\nimport { gsap } from \"gsap\";\nimport './App.less';\n\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\nimport Measure from 'react-measure'\n\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\n\nimport { ApolloProvider } from \"react-apollo\";\n\nimport { Query } from \"react-apollo\";\n\nimport gql from \"graphql-tag\";\n\nimport * as portals from 'react-reverse-portal';\n\nimport {coordEach} from 'turf-meta';\n\n//import Landscape  from \"./Components/Landscape\";\nimport Deck       from \"./Components/Deck\";\n\nimport Front        from \"./Components/Cards/Front\";\nimport Title        from \"./Components/Cards/Title\";\nimport Sketch     from \"./Components/Cards/Sketch\";\nimport Polaroids  from \"./Components/Cards/Polaroids/HTML\";\n\nimport CardAdder from './Components/Adder';\n\nconst GETCARD = gql`\n               {\n                owners(where: {id: {_eq: \"cyclefriendly\"}}) {\n                  id\n                  \n                  trips(where: {url: {_eq: \"lakes2021\"}}) {\n                    id\n                    name\n                    url\n                    geojson\n                    cards(order_by: {id: asc}) {\n                      id\n                      html\n                      type\n                      map\n                      title\n                      text\n                      camera\n                      content\n                      annotations\n                      landscapecamera\n                      assets {\n                        data\n                      }\n                    }\n                  }\n                }\n              }\n\n`\n\nconst useContainerDimensions = myRef => {\n  const getDimensions = () => ({\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight\n  })\n\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current) {\n      setDimensions(getDimensions())\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [myRef])\n\n  return dimensions;\n};\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst httpLink = new HttpLink({ uri: 'https://beatroute2019.herokuapp.com/v1/graphql' });\n\nconst client = new ApolloClient({ link: (httpLink), cache: new InMemoryCache() });\n\nconst App = () => {\n\n  const portalNode = React.useMemo(() => portals.createHtmlPortalNode(), []);\n\n  const portalNode2 = React.useMemo(() => portals.createHtmlPortalNode(), []);\n\n  const [loadedCount, setLoadedCount] = useState(0);\n\n  const admin = true;\n\n return (\n    <div className=\"App\">\n\n      <ApolloProvider client={client}>\n\n        <Query query={GETCARD}  >\n          {({ loading, error, data, refetch  }) => {\n\n            if (loading || !data) return null\n\n            const trip  = data.owners[0].trips[0];\n            const cards = data.owners[0].trips[0].cards;\n            const stillLoading = loadedCount < cards.length;\n\n            //remove altitude\n            coordEach(trip.geojson, function(coords) {\n              if (coords.length > 2) coords.pop();\n            });\n\n            return <Fragment>\n\n              <Measure bounds>\n\n                {({ measureRef, contentRect: { bounds: { width }} }) => (\n\n                  <main className=\"App-main\">\n\n                  <portals.InPortal node={portalNode2}>\n                      <Deck trip={trip} width={width} updateCard={() => alert(\"not implemented\")}/>\n                  </portals.InPortal>\n\n                    {cards.map((card, i) => {\n\n                      if (card.type === 'Front') {\n                        return <div className=\"App-section\" key={i} >\n                                {admin && <code>{card.id}</code>}\n                                 <Front key={i + '' + card.id} trip={trip} card={card} index={i}/>\n                               </div>\n                      }\n\n                      if (card.type === 'Title') {\n                        return <div className=\"App-section\" key={i} >\n                          {admin && <code>{card.id}</code>}\n                          <Title key={i + '' + card.id} card={card} i={i}/>\n                        </div>\n                      }\n\n                      if (true && card.type === 'Sketch') {\n\n                        return  <div className=\"App-section\" key={i} >\n                          { admin && <code>{JSON.stringify(card.id)}</code>}\n                          <Sketch trip={trip} portalNode={portalNode} portalNode2={portalNode2} width={width < 500 ? width : 500} admin={admin} stillLoading={stillLoading} incrementLoadedCount={() => setLoadedCount(loadedCount + 1)} key={i + '' + card.id} index={i} card={card} refetch={refetch}/>\n                        </div>\n                      }\n\n                      if (card.type === 'Polaroid') {\n\n                        return  <div className=\"App-section\" key={i} >\n                          {admin && <code>{card.id}</code>}\n                          <Polaroids width={width < 500 ? width : 500} admin={admin} stillLoading={stillLoading} incrementLoadedCount={() => setLoadedCount(loadedCount + 1)} key={i + '' + card.id} index={i} card={card} refetch={refetch}/>\n                        </div>\n                      }\n\n                      return null;\n                    })}\n\n                    <div className=\"App-section\" style={{height : '100%'}}>\n                      <CardAdder trip={trip} refetch={refetch}/>\n                    </div>\n\n                    <div ref={measureRef}>My width is {width}</div>\n\n                  </main>\n\n                  )}\n              </Measure>\n\n            </Fragment>\n\n          }}\n\n        </Query>\n\n      </ApolloProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}