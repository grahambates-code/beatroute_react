[{"/Users/lamdoan/Documents/Workspace/upwork/beatroute_react/src/App.js":"1","/Users/lamdoan/Documents/Workspace/upwork/beatroute_react/src/Components/Cards/Journal/Toolbar/DeleteCard/index.js":"2"},{"size":8154,"mtime":1619623461021,"results":"3","hashOfConfig":"4"},{"size":1030,"mtime":1619623461024,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"1vz7dx6",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lamdoan/Documents/Workspace/upwork/beatroute_react/src/App.js",["12","13","14","15","16"],"import React, { Fragment, useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport './App.less';\n\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\nimport Measure from 'react-measure';\n\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\n\nimport { ApolloProvider } from 'react-apollo';\n\nimport { Query } from 'react-apollo';\n\nimport gql from 'graphql-tag';\n\nimport * as portals from 'react-reverse-portal';\n\nimport { coordEach } from '@turf/meta';\n\nimport AddPhoto from './Components/Photos/Add';\n\nimport JournalCover from './Components/Cards/Journal/Cover';\nimport JournalHeading from './Components/Cards/Journal/Heading';\nimport JournalText from './Components/Cards/Journal/Text';\nimport JournalMap from './Components/Cards/Journal/Map';\n\nimport CardAdder from './Components/Adder';\nimport * as THREE from 'three';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { Container, createMuiTheme, Box } from '@material-ui/core';\nimport Header from './Components/Header';\n\nconst theme = createMuiTheme({});\n\nconst loader = new THREE.FontLoader();\n\nconst GETCARD = gql`\n  {\n    media {\n      id\n    }\n\n    owners: owner(where: { id: { _eq: \"cyclefriendly\" } }) {\n      id\n\n      trips(where: { url: { _eq: \"lakes2022\" } }) {\n        id\n        name\n        url\n\n        cards(order_by: { id: asc }) {\n          id\n          type\n          data\n\n          slides(order_by: { id: asc }) {\n            camera\n            data\n            id\n            assets(order_by: { order: desc }) {\n              id\n              position\n              scale\n              translation\n              rotation\n              type\n              data\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst useContainerDimensions = (myRef) => {\n  const getDimensions = () => ({\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight,\n  });\n\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [myRef]);\n\n  return dimensions;\n};\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst httpLink = new HttpLink({\n  uri: 'https://guided-viper-73.hasura.app/v1/graphql',\n});\n\nconst client = new ApolloClient({ link: httpLink, cache: new InMemoryCache() });\n\nfunction loadJSON(url) {\n  return new Promise((resolve) => {\n    loader.load(url, resolve);\n  });\n}\n\nconst App = () => {\n  const portalNode2 = React.useMemo(() => portals.createHtmlPortalNode(), []);\n\n  const [loadedCount, setLoadedCount] = useState(0);\n  const [font, setFont] = useState(null);\n\n  useEffect(async () => {\n    const result = await loadJSON('fonts/test.json');\n    setFont(result);\n  }, []);\n\n  const admin = true;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <ApolloProvider client={client}>\n          <Query query={GETCARD}>\n            {({ loading, error, data, refetch }) => {\n              if (loading || !data) return null;\n\n              const trip = data.owners[0].trips[0];\n              const cards = data.owners[0].trips[0].cards;\n              const stillLoading = loadedCount < cards.length;\n\n              trip.cards\n                .filter((d) => d.type === 'JournalSketch')\n                .forEach((c) => {\n                  coordEach(c.data, function (coords) {\n                    if (coords.length > 2) coords.pop();\n                  });\n                });\n\n              return (\n                <Fragment>\n                  <Measure bounds>\n                    {({\n                      measureRef,\n                      contentRect: {\n                        bounds: { width },\n                      },\n                    }) => (\n                      <div>\n                        <Header title={trip.name} />\n                        <Box maxHeight=\"100vh\" overflow=\"scroll\">\n                          <h2>\n                            {' '}\n                            <AddPhoto refetch={refetch} />{' '}\n                          </h2>\n\n                          <main className=\"App-main\">\n                            <portals.InPortal node={portalNode2}>\n                              <div> this is one time component</div>\n                              {/*updateCard will be overwritten when called in Sketch*/}\n                              {/*<Deck trip={trip} width={width} updateCard={() => alert(\"not implemented\")}/>*/}\n                            </portals.InPortal>\n\n                            {cards.map((card, i) => {\n                              return (\n                                <div className=\"App-section\" key={i}>\n                                  {card.type === 'JournalFront' && (\n                                    <JournalCover\n                                      key={i + '' + card.id}\n                                      card={card}\n                                      trip={trip}\n                                      index={i}\n                                      client={client}\n                                      refetch={refetch}\n                                    />\n                                  )}\n                                  {card.type === 'JournalHeading' && (\n                                    <JournalHeading\n                                      key={i + '' + card.id}\n                                      card={card}\n                                      trip={trip}\n                                      index={i}\n                                      client={client}\n                                      refetch={refetch}\n                                    />\n                                  )}\n                                  {card.type === 'JournalText' && (\n                                    <JournalText\n                                      key={i + '' + card.id}\n                                      card={card}\n                                      trip={trip}\n                                      index={i}\n                                      client={client}\n                                      refetch={refetch}\n                                    />\n                                  )}\n                                  {card.type === 'JournalMap' && font && (\n                                    <JournalMap\n                                      key={i + '' + card.id}\n                                      card={card}\n                                      trip={trip}\n                                      index={i}\n                                      client={client}\n                                      font={font}\n                                      portalNode2={portalNode2}\n                                      width={width < 500 ? width : 500}\n                                      admin={admin}\n                                      stillLoading={stillLoading}\n                                      incrementLoadedCount={() =>\n                                        setLoadedCount(loadedCount + 1)\n                                      }\n                                      index={i}\n                                      refetch={refetch}\n                                    />\n                                  )}\n                                </div>\n                              );\n                            })}\n\n                            <div\n                              className=\"App-section\"\n                              style={{ height: '100%' }}\n                            >\n                              <CardAdder trip={trip} refetch={refetch} />\n                            </div>\n                          </main>\n                        </Box>\n                      </div>\n                    )}\n                  </Measure>\n                </Fragment>\n              );\n            }}\n          </Query>\n        </ApolloProvider>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n",["17","18"],"/Users/lamdoan/Documents/Workspace/upwork/beatroute_react/src/Components/Cards/Journal/Toolbar/DeleteCard/index.js",["19"],{"ruleId":"20","severity":1,"message":"21","line":1,"column":27,"nodeType":"22","messageId":"23","endLine":1,"endColumn":33},{"ruleId":"20","severity":1,"message":"24","line":77,"column":7,"nodeType":"22","messageId":"23","endLine":77,"endColumn":29},{"ruleId":"25","severity":1,"message":"26","line":99,"column":6,"nodeType":"27","endLine":99,"endColumn":13,"suggestions":"28"},{"ruleId":"25","severity":1,"message":"29","line":124,"column":13,"nodeType":"30","endLine":127,"endColumn":4},{"ruleId":"31","severity":1,"message":"32","line":179,"column":333,"nodeType":"33","endLine":179,"endColumn":342},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":16,"column":1,"nodeType":"40","endLine":38,"endColumn":3},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useContainerDimensions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDimensions'. Either include it or remove the dependency array.","ArrayExpression",["41"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["42"],"no-negated-in-lhs",["43"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"44","fix":"45"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getDimensions, myRef]",{"range":"46","text":"47"},[2644,2651],"[getDimensions, myRef]"]